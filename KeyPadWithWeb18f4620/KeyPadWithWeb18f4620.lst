;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 3/10/2013 3:46:41 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF005EFE5  	GOTO        3018
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_checkColumn2:
;KeyPadWithWeb18f4620.c,83 :: 		char checkColumn2(){  //checks the second column of the keypad
;KeyPadWithWeb18f4620.c,84 :: 		PORTB = 0b01000000;
0x001C	0x0E40      	MOVLW       64
0x001E	0x6E81      	MOVWF       PORTB 
;KeyPadWithWeb18f4620.c,85 :: 		delay_ms(1);
0x0020	0x0E03      	MOVLW       3
0x0022	0x6E0C      	MOVWF       R12, 0
0x0024	0x0E97      	MOVLW       151
0x0026	0x6E0D      	MOVWF       R13, 0
L_checkColumn211:
0x0028	0x2E0D      	DECFSZ      R13, 1, 0
0x002A	0xD7FE      	BRA         L_checkColumn211
0x002C	0x2E0C      	DECFSZ      R12, 1, 0
0x002E	0xD7FC      	BRA         L_checkColumn211
0x0030	0x0000      	NOP
0x0032	0x0000      	NOP
;KeyPadWithWeb18f4620.c,88 :: 		if((PORTB & 0b00011111) == 0b00000010){
0x0034	0x0E1F      	MOVLW       31
0x0036	0x1481      	ANDWF       PORTB, 0 
0x0038	0x6E01      	MOVWF       R1 
0x003A	0x5001      	MOVF        R1, 0 
0x003C	0x0A02      	XORLW       2
0x003E	0xE103      	BNZ         L_checkColumn212
;KeyPadWithWeb18f4620.c,89 :: 		return '2';
0x0040	0x0E32      	MOVLW       50
0x0042	0x6E00      	MOVWF       R0 
0x0044	0xD01C      	BRA         L_end_checkColumn2
;KeyPadWithWeb18f4620.c,90 :: 		}
L_checkColumn212:
;KeyPadWithWeb18f4620.c,91 :: 		else if ((PORTB & 0b00011111) == 0b00000100){
0x0046	0x0E1F      	MOVLW       31
0x0048	0x1481      	ANDWF       PORTB, 0 
0x004A	0x6E01      	MOVWF       R1 
0x004C	0x5001      	MOVF        R1, 0 
0x004E	0x0A04      	XORLW       4
0x0050	0xE103      	BNZ         L_checkColumn214
;KeyPadWithWeb18f4620.c,92 :: 		return '5';
0x0052	0x0E35      	MOVLW       53
0x0054	0x6E00      	MOVWF       R0 
0x0056	0xD013      	BRA         L_end_checkColumn2
;KeyPadWithWeb18f4620.c,93 :: 		}
L_checkColumn214:
;KeyPadWithWeb18f4620.c,94 :: 		else if ((PORTB & 0b00011111) == 0b00001000){
0x0058	0x0E1F      	MOVLW       31
0x005A	0x1481      	ANDWF       PORTB, 0 
0x005C	0x6E01      	MOVWF       R1 
0x005E	0x5001      	MOVF        R1, 0 
0x0060	0x0A08      	XORLW       8
0x0062	0xE103      	BNZ         L_checkColumn216
;KeyPadWithWeb18f4620.c,95 :: 		return '8';
0x0064	0x0E38      	MOVLW       56
0x0066	0x6E00      	MOVWF       R0 
0x0068	0xD00A      	BRA         L_end_checkColumn2
;KeyPadWithWeb18f4620.c,96 :: 		}
L_checkColumn216:
;KeyPadWithWeb18f4620.c,97 :: 		else if ((PORTB & 0b00011111) == 0b00010000){
0x006A	0x0E1F      	MOVLW       31
0x006C	0x1481      	ANDWF       PORTB, 0 
0x006E	0x6E01      	MOVWF       R1 
0x0070	0x5001      	MOVF        R1, 0 
0x0072	0x0A10      	XORLW       16
0x0074	0xE103      	BNZ         L_checkColumn218
;KeyPadWithWeb18f4620.c,98 :: 		return '0';
0x0076	0x0E30      	MOVLW       48
0x0078	0x6E00      	MOVWF       R0 
0x007A	0xD001      	BRA         L_end_checkColumn2
;KeyPadWithWeb18f4620.c,99 :: 		}
L_checkColumn218:
;KeyPadWithWeb18f4620.c,100 :: 		else return 0;
0x007C	0x6A00      	CLRF        R0 
;KeyPadWithWeb18f4620.c,101 :: 		}
L_end_checkColumn2:
0x007E	0x0012      	RETURN      0
; end of _checkColumn2
_checkColumn1:
;KeyPadWithWeb18f4620.c,64 :: 		char checkColumn1(){                //checks the first column of the keypad
;KeyPadWithWeb18f4620.c,65 :: 		PORTB = 0b00100000;
0x0080	0x0E20      	MOVLW       32
0x0082	0x6E81      	MOVWF       PORTB 
;KeyPadWithWeb18f4620.c,66 :: 		delay_ms(1);
0x0084	0x0E03      	MOVLW       3
0x0086	0x6E0C      	MOVWF       R12, 0
0x0088	0x0E97      	MOVLW       151
0x008A	0x6E0D      	MOVWF       R13, 0
L_checkColumn12:
0x008C	0x2E0D      	DECFSZ      R13, 1, 0
0x008E	0xD7FE      	BRA         L_checkColumn12
0x0090	0x2E0C      	DECFSZ      R12, 1, 0
0x0092	0xD7FC      	BRA         L_checkColumn12
0x0094	0x0000      	NOP
0x0096	0x0000      	NOP
;KeyPadWithWeb18f4620.c,68 :: 		if((PORTB & 0b00011111) == 0b00000010){
0x0098	0x0E1F      	MOVLW       31
0x009A	0x1481      	ANDWF       PORTB, 0 
0x009C	0x6E01      	MOVWF       R1 
0x009E	0x5001      	MOVF        R1, 0 
0x00A0	0x0A02      	XORLW       2
0x00A2	0xE103      	BNZ         L_checkColumn13
;KeyPadWithWeb18f4620.c,69 :: 		return '1';
0x00A4	0x0E31      	MOVLW       49
0x00A6	0x6E00      	MOVWF       R0 
0x00A8	0xD01C      	BRA         L_end_checkColumn1
;KeyPadWithWeb18f4620.c,70 :: 		}
L_checkColumn13:
;KeyPadWithWeb18f4620.c,71 :: 		else if ((PORTB & 0b00011111) == 0b00000100){
0x00AA	0x0E1F      	MOVLW       31
0x00AC	0x1481      	ANDWF       PORTB, 0 
0x00AE	0x6E01      	MOVWF       R1 
0x00B0	0x5001      	MOVF        R1, 0 
0x00B2	0x0A04      	XORLW       4
0x00B4	0xE103      	BNZ         L_checkColumn15
;KeyPadWithWeb18f4620.c,72 :: 		return '4';
0x00B6	0x0E34      	MOVLW       52
0x00B8	0x6E00      	MOVWF       R0 
0x00BA	0xD013      	BRA         L_end_checkColumn1
;KeyPadWithWeb18f4620.c,73 :: 		}
L_checkColumn15:
;KeyPadWithWeb18f4620.c,74 :: 		else if ((PORTB & 0b00011111) == 0b00001000){
0x00BC	0x0E1F      	MOVLW       31
0x00BE	0x1481      	ANDWF       PORTB, 0 
0x00C0	0x6E01      	MOVWF       R1 
0x00C2	0x5001      	MOVF        R1, 0 
0x00C4	0x0A08      	XORLW       8
0x00C6	0xE103      	BNZ         L_checkColumn17
;KeyPadWithWeb18f4620.c,75 :: 		return '7';
0x00C8	0x0E37      	MOVLW       55
0x00CA	0x6E00      	MOVWF       R0 
0x00CC	0xD00A      	BRA         L_end_checkColumn1
;KeyPadWithWeb18f4620.c,76 :: 		}
L_checkColumn17:
;KeyPadWithWeb18f4620.c,77 :: 		else if ((PORTB & 0b00011111) == 0b00010000){
0x00CE	0x0E1F      	MOVLW       31
0x00D0	0x1481      	ANDWF       PORTB, 0 
0x00D2	0x6E01      	MOVWF       R1 
0x00D4	0x5001      	MOVF        R1, 0 
0x00D6	0x0A10      	XORLW       16
0x00D8	0xE103      	BNZ         L_checkColumn19
;KeyPadWithWeb18f4620.c,78 :: 		return '*';
0x00DA	0x0E2A      	MOVLW       42
0x00DC	0x6E00      	MOVWF       R0 
0x00DE	0xD001      	BRA         L_end_checkColumn1
;KeyPadWithWeb18f4620.c,79 :: 		}
L_checkColumn19:
;KeyPadWithWeb18f4620.c,80 :: 		else return 0;
0x00E0	0x6A00      	CLRF        R0 
;KeyPadWithWeb18f4620.c,81 :: 		}
L_end_checkColumn1:
0x00E2	0x0012      	RETURN      0
; end of _checkColumn1
_checkColumn3:
;KeyPadWithWeb18f4620.c,103 :: 		char checkColumn3(){   //checks the third column of the keypad
;KeyPadWithWeb18f4620.c,104 :: 		PORTB = 0b10000000;
0x00E4	0x0E80      	MOVLW       128
0x00E6	0x6E81      	MOVWF       PORTB 
;KeyPadWithWeb18f4620.c,105 :: 		delay_ms(1);
0x00E8	0x0E03      	MOVLW       3
0x00EA	0x6E0C      	MOVWF       R12, 0
0x00EC	0x0E97      	MOVLW       151
0x00EE	0x6E0D      	MOVWF       R13, 0
L_checkColumn320:
0x00F0	0x2E0D      	DECFSZ      R13, 1, 0
0x00F2	0xD7FE      	BRA         L_checkColumn320
0x00F4	0x2E0C      	DECFSZ      R12, 1, 0
0x00F6	0xD7FC      	BRA         L_checkColumn320
0x00F8	0x0000      	NOP
0x00FA	0x0000      	NOP
;KeyPadWithWeb18f4620.c,107 :: 		if((PORTB & 0b00011111) == 0b00000010){
0x00FC	0x0E1F      	MOVLW       31
0x00FE	0x1481      	ANDWF       PORTB, 0 
0x0100	0x6E01      	MOVWF       R1 
0x0102	0x5001      	MOVF        R1, 0 
0x0104	0x0A02      	XORLW       2
0x0106	0xE103      	BNZ         L_checkColumn321
;KeyPadWithWeb18f4620.c,108 :: 		return '3';
0x0108	0x0E33      	MOVLW       51
0x010A	0x6E00      	MOVWF       R0 
0x010C	0xD01C      	BRA         L_end_checkColumn3
;KeyPadWithWeb18f4620.c,109 :: 		}
L_checkColumn321:
;KeyPadWithWeb18f4620.c,110 :: 		else if ((PORTB & 0b00011111) == 0b00000100){
0x010E	0x0E1F      	MOVLW       31
0x0110	0x1481      	ANDWF       PORTB, 0 
0x0112	0x6E01      	MOVWF       R1 
0x0114	0x5001      	MOVF        R1, 0 
0x0116	0x0A04      	XORLW       4
0x0118	0xE103      	BNZ         L_checkColumn323
;KeyPadWithWeb18f4620.c,111 :: 		return '6';
0x011A	0x0E36      	MOVLW       54
0x011C	0x6E00      	MOVWF       R0 
0x011E	0xD013      	BRA         L_end_checkColumn3
;KeyPadWithWeb18f4620.c,112 :: 		}
L_checkColumn323:
;KeyPadWithWeb18f4620.c,113 :: 		else if ((PORTB & 0b00011111) == 0b00001000){
0x0120	0x0E1F      	MOVLW       31
0x0122	0x1481      	ANDWF       PORTB, 0 
0x0124	0x6E01      	MOVWF       R1 
0x0126	0x5001      	MOVF        R1, 0 
0x0128	0x0A08      	XORLW       8
0x012A	0xE103      	BNZ         L_checkColumn325
;KeyPadWithWeb18f4620.c,114 :: 		return '9';
0x012C	0x0E39      	MOVLW       57
0x012E	0x6E00      	MOVWF       R0 
0x0130	0xD00A      	BRA         L_end_checkColumn3
;KeyPadWithWeb18f4620.c,115 :: 		}
L_checkColumn325:
;KeyPadWithWeb18f4620.c,116 :: 		else if ((PORTB & 0b00011111) == 0b00010000){
0x0132	0x0E1F      	MOVLW       31
0x0134	0x1481      	ANDWF       PORTB, 0 
0x0136	0x6E01      	MOVWF       R1 
0x0138	0x5001      	MOVF        R1, 0 
0x013A	0x0A10      	XORLW       16
0x013C	0xE103      	BNZ         L_checkColumn327
;KeyPadWithWeb18f4620.c,117 :: 		return '#';
0x013E	0x0E23      	MOVLW       35
0x0140	0x6E00      	MOVWF       R0 
0x0142	0xD001      	BRA         L_end_checkColumn3
;KeyPadWithWeb18f4620.c,118 :: 		}
L_checkColumn327:
;KeyPadWithWeb18f4620.c,119 :: 		else return 0;
0x0144	0x6A00      	CLRF        R0 
;KeyPadWithWeb18f4620.c,120 :: 		}
L_end_checkColumn3:
0x0146	0x0012      	RETURN      0
; end of _checkColumn3
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0148	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x014A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x014E	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0150	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0152	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0154	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0156	0x0012      	RETURN      0
; end of ___CC2DW
_ADCRead:
;KeyPadWithWeb18f4620.c,50 :: 		int ADCRead( unsigned char ch){
;KeyPadWithWeb18f4620.c,52 :: 		ADCON0 = 0x00;//configuring analog channel
0x0158	0x6AC2      	CLRF        ADCON0 
;KeyPadWithWeb18f4620.c,53 :: 		ADCON0 = (ch<<2); //selecting analog channel
0x015A	0xF000C04E  	MOVFF       FARG_ADCRead_ch, R0
0x015E	0x3600      	RLCF        R0, 1 
0x0160	0x9000      	BCF         R0, 0 
0x0162	0x3600      	RLCF        R0, 1 
0x0164	0x9000      	BCF         R0, 0 
0x0166	0xFFC2C000  	MOVFF       R0, ADCON0
;KeyPadWithWeb18f4620.c,54 :: 		ADON_bit = 1; //switch on adc module
0x016A	0x80C2      	BSF         ADON_bit, 0 
;KeyPadWithWeb18f4620.c,55 :: 		GO_DONE_bit =1;//Start conversion
0x016C	0x82C2      	BSF         GO_DONE_bit, 1 
;KeyPadWithWeb18f4620.c,57 :: 		while(GO_DONE_bit); //wait for the conversion to finish
L_ADCRead0:
0x016E	0xA2C2      	BTFSS       GO_DONE_bit, 1 
0x0170	0xD001      	BRA         L_ADCRead1
0x0172	0xD7FD      	BRA         L_ADCRead0
L_ADCRead1:
;KeyPadWithWeb18f4620.c,58 :: 		ADON_bit =0; //switch off adc
0x0174	0x90C2      	BCF         ADON_bit, 0 
;KeyPadWithWeb18f4620.c,60 :: 		return (ADRESL + (255*ADRESH));  // puts all ten bits into one variable (math might be off)
0x0176	0x0EFF      	MOVLW       255
0x0178	0x02C4      	MULWF       ADRESH 
0x017A	0xF000CFF3  	MOVFF       PRODL, R0
0x017E	0xF001CFF4  	MOVFF       PRODH, R1
0x0182	0x50C3      	MOVF        ADRESL, 0 
0x0184	0x2600      	ADDWF       R0, 1 
0x0186	0x0E00      	MOVLW       0
0x0188	0x2201      	ADDWFC      R1, 1 
;KeyPadWithWeb18f4620.c,61 :: 		}
L_end_ADCRead:
0x018A	0x0012      	RETURN      0
; end of _ADCRead
_newPassword:
;KeyPadWithWeb18f4620.c,201 :: 		int newPassword(){
;KeyPadWithWeb18f4620.c,204 :: 		int counter = 0;
0x018C	0x6A56      	CLRF        newPassword_counter_L0 
0x018E	0x6A57      	CLRF        newPassword_counter_L0+1 
0x0190	0x6A58      	CLRF        newPassword_i_L0 
0x0192	0x6A59      	CLRF        newPassword_i_L0+1 
0x0194	0x6A5A      	CLRF        newPassword_keysPressed_L0 
0x0196	0x6A5B      	CLRF        newPassword_keysPressed_L0+1 
0x0198	0x6A5C      	CLRF        newPassword_j_L0 
0x019A	0x6A5D      	CLRF        newPassword_j_L0+1 
0x019C	0x6A5E      	CLRF        newPassword_confirmed_L0 
0x019E	0x6A5F      	CLRF        newPassword_confirmed_L0+1 
;KeyPadWithWeb18f4620.c,209 :: 		PORTA |= 0b00001000;
0x01A0	0x8680      	BSF         PORTA, 3 
;KeyPadWithWeb18f4620.c,211 :: 		while((counter <= timeOutLimit) && keysPressed < 4){
L_newPassword64:
0x01A2	0x0E80      	MOVLW       128
0x01A4	0x1823      	XORWF       _timeOutLimit+1, 0 
0x01A6	0x6E00      	MOVWF       R0 
0x01A8	0x0E80      	MOVLW       128
0x01AA	0x1857      	XORWF       newPassword_counter_L0+1, 0 
0x01AC	0x5C00      	SUBWF       R0, 0 
0x01AE	0xE102      	BNZ         L__newPassword238
0x01B0	0x5056      	MOVF        newPassword_counter_L0, 0 
0x01B2	0x5C22      	SUBWF       _timeOutLimit, 0 
L__newPassword238:
0x01B4	0xE35F      	BNC         L_newPassword65
0x01B6	0x0E80      	MOVLW       128
0x01B8	0x185B      	XORWF       newPassword_keysPressed_L0+1, 0 
0x01BA	0x6E00      	MOVWF       R0 
0x01BC	0x0E80      	MOVLW       128
0x01BE	0x5C00      	SUBWF       R0, 0 
0x01C0	0xE102      	BNZ         L__newPassword239
0x01C2	0x0E04      	MOVLW       4
0x01C4	0x5C5A      	SUBWF       newPassword_keysPressed_L0, 0 
L__newPassword239:
0x01C6	0xE256      	BC          L_newPassword65
L__newPassword216:
;KeyPadWithWeb18f4620.c,212 :: 		counter++;
0x01C8	0x4A56      	INFSNZ      newPassword_counter_L0, 1 
0x01CA	0x2A57      	INCF        newPassword_counter_L0+1, 1 
;KeyPadWithWeb18f4620.c,213 :: 		if(checkColumn1()){
0x01CC	0xDF59      	RCALL       _checkColumn1
0x01CE	0x5200      	MOVF        R0, 1 
0x01D0	0xE019      	BZ          L_newPassword68
;KeyPadWithWeb18f4620.c,214 :: 		keysPressed++;
0x01D2	0x4A5A      	INFSNZ      newPassword_keysPressed_L0, 1 
0x01D4	0x2A5B      	INCF        newPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,215 :: 		counter = 0;
0x01D6	0x6A56      	CLRF        newPassword_counter_L0 
0x01D8	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,217 :: 		temp1[i] = checkColumn1();
0x01DA	0x0E4E      	MOVLW       newPassword_temp1_L0
0x01DC	0x2458      	ADDWF       newPassword_i_L0, 0 
0x01DE	0x6E60      	MOVWF       FLOC__newPassword 
0x01E0	0x0E00      	MOVLW       hi_addr(newPassword_temp1_L0)
0x01E2	0x2059      	ADDWFC      newPassword_i_L0+1, 0 
0x01E4	0x6E61      	MOVWF       FLOC__newPassword+1 
0x01E6	0xDF4C      	RCALL       _checkColumn1
0x01E8	0xFFE1C060  	MOVFF       FLOC__newPassword, FSR1L
0x01EC	0xFFE2C061  	MOVFF       FLOC__newPassword+1, FSR1H
0x01F0	0xFFE6C000  	MOVFF       R0, POSTINC1
;KeyPadWithWeb18f4620.c,218 :: 		i++;
0x01F4	0x4A58      	INFSNZ      newPassword_i_L0, 1 
0x01F6	0x2A59      	INCF        newPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,220 :: 		while(PORTB & 0b00011110); //debounce
L_newPassword69:
0x01F8	0x0E1E      	MOVLW       30
0x01FA	0x1481      	ANDWF       PORTB, 0 
0x01FC	0x6E00      	MOVWF       R0 
0x01FE	0xE001      	BZ          L_newPassword70
0x0200	0xD7FB      	BRA         L_newPassword69
L_newPassword70:
;KeyPadWithWeb18f4620.c,221 :: 		}
0x0202	0xD037      	BRA         L_newPassword71
L_newPassword68:
;KeyPadWithWeb18f4620.c,222 :: 		else if(checkColumn2()){
0x0204	0xDF0B      	RCALL       _checkColumn2
0x0206	0x5200      	MOVF        R0, 1 
0x0208	0xE019      	BZ          L_newPassword72
;KeyPadWithWeb18f4620.c,223 :: 		keysPressed++;
0x020A	0x4A5A      	INFSNZ      newPassword_keysPressed_L0, 1 
0x020C	0x2A5B      	INCF        newPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,224 :: 		counter = 0;
0x020E	0x6A56      	CLRF        newPassword_counter_L0 
0x0210	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,226 :: 		temp1[i] = checkColumn2();
0x0212	0x0E4E      	MOVLW       newPassword_temp1_L0
0x0214	0x2458      	ADDWF       newPassword_i_L0, 0 
0x0216	0x6E60      	MOVWF       FLOC__newPassword 
0x0218	0x0E00      	MOVLW       hi_addr(newPassword_temp1_L0)
0x021A	0x2059      	ADDWFC      newPassword_i_L0+1, 0 
0x021C	0x6E61      	MOVWF       FLOC__newPassword+1 
0x021E	0xDEFE      	RCALL       _checkColumn2
0x0220	0xFFE1C060  	MOVFF       FLOC__newPassword, FSR1L
0x0224	0xFFE2C061  	MOVFF       FLOC__newPassword+1, FSR1H
0x0228	0xFFE6C000  	MOVFF       R0, POSTINC1
;KeyPadWithWeb18f4620.c,227 :: 		i++;
0x022C	0x4A58      	INFSNZ      newPassword_i_L0, 1 
0x022E	0x2A59      	INCF        newPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,229 :: 		while(PORTB & 0b00011110); //debounce
L_newPassword73:
0x0230	0x0E1E      	MOVLW       30
0x0232	0x1481      	ANDWF       PORTB, 0 
0x0234	0x6E00      	MOVWF       R0 
0x0236	0xE001      	BZ          L_newPassword74
0x0238	0xD7FB      	BRA         L_newPassword73
L_newPassword74:
;KeyPadWithWeb18f4620.c,230 :: 		}
0x023A	0xD01B      	BRA         L_newPassword75
L_newPassword72:
;KeyPadWithWeb18f4620.c,231 :: 		else if(checkColumn3()){
0x023C	0xDF53      	RCALL       _checkColumn3
0x023E	0x5200      	MOVF        R0, 1 
0x0240	0xE018      	BZ          L_newPassword76
;KeyPadWithWeb18f4620.c,232 :: 		keysPressed++;
0x0242	0x4A5A      	INFSNZ      newPassword_keysPressed_L0, 1 
0x0244	0x2A5B      	INCF        newPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,233 :: 		counter = 0;
0x0246	0x6A56      	CLRF        newPassword_counter_L0 
0x0248	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,235 :: 		temp1[i] = checkColumn3();
0x024A	0x0E4E      	MOVLW       newPassword_temp1_L0
0x024C	0x2458      	ADDWF       newPassword_i_L0, 0 
0x024E	0x6E60      	MOVWF       FLOC__newPassword 
0x0250	0x0E00      	MOVLW       hi_addr(newPassword_temp1_L0)
0x0252	0x2059      	ADDWFC      newPassword_i_L0+1, 0 
0x0254	0x6E61      	MOVWF       FLOC__newPassword+1 
0x0256	0xDF46      	RCALL       _checkColumn3
0x0258	0xFFE1C060  	MOVFF       FLOC__newPassword, FSR1L
0x025C	0xFFE2C061  	MOVFF       FLOC__newPassword+1, FSR1H
0x0260	0xFFE6C000  	MOVFF       R0, POSTINC1
;KeyPadWithWeb18f4620.c,236 :: 		i++;
0x0264	0x4A58      	INFSNZ      newPassword_i_L0, 1 
0x0266	0x2A59      	INCF        newPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,238 :: 		while(PORTB & 0b00011110); //debounce
L_newPassword77:
0x0268	0x0E1E      	MOVLW       30
0x026A	0x1481      	ANDWF       PORTB, 0 
0x026C	0x6E00      	MOVWF       R0 
0x026E	0xE001      	BZ          L_newPassword78
0x0270	0xD7FB      	BRA         L_newPassword77
L_newPassword78:
;KeyPadWithWeb18f4620.c,239 :: 		}
L_newPassword76:
L_newPassword75:
L_newPassword71:
;KeyPadWithWeb18f4620.c,240 :: 		}
0x0272	0xD797      	BRA         L_newPassword64
L_newPassword65:
;KeyPadWithWeb18f4620.c,242 :: 		if(keysPressed != 4)    // the user timed out
0x0274	0x0E00      	MOVLW       0
0x0276	0x185B      	XORWF       newPassword_keysPressed_L0+1, 0 
0x0278	0xE102      	BNZ         L__newPassword240
0x027A	0x0E04      	MOVLW       4
0x027C	0x185A      	XORWF       newPassword_keysPressed_L0, 0 
L__newPassword240:
0x027E	0xE003      	BZ          L_newPassword79
;KeyPadWithWeb18f4620.c,243 :: 		return 0;
0x0280	0x6A00      	CLRF        R0 
0x0282	0x6A01      	CLRF        R1 
0x0284	0xD0E0      	BRA         L_end_newPassword
L_newPassword79:
;KeyPadWithWeb18f4620.c,245 :: 		else if(keysPressed == 4){
0x0286	0x0E00      	MOVLW       0
0x0288	0x185B      	XORWF       newPassword_keysPressed_L0+1, 0 
0x028A	0xE102      	BNZ         L__newPassword241
0x028C	0x0E04      	MOVLW       4
0x028E	0x185A      	XORWF       newPassword_keysPressed_L0, 0 
L__newPassword241:
0x0290	0xA4D8      	BTFSS       STATUS, 2 
0x0292	0xD0D9      	BRA         L_newPassword81
;KeyPadWithWeb18f4620.c,246 :: 		PORTA |= 0b00001010; //green led (keeping reset led on)
0x0294	0x0E0A      	MOVLW       10
0x0296	0x1280      	IORWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,248 :: 		delay_ms(delay1);
0x0298	0x0E03      	MOVLW       3
0x029A	0x6E0B      	MOVWF       R11, 0
0x029C	0x0E08      	MOVLW       8
0x029E	0x6E0C      	MOVWF       R12, 0
0x02A0	0x0E77      	MOVLW       119
0x02A2	0x6E0D      	MOVWF       R13, 0
L_newPassword82:
0x02A4	0x2E0D      	DECFSZ      R13, 1, 0
0x02A6	0xD7FE      	BRA         L_newPassword82
0x02A8	0x2E0C      	DECFSZ      R12, 1, 0
0x02AA	0xD7FC      	BRA         L_newPassword82
0x02AC	0x2E0B      	DECFSZ      R11, 1, 0
0x02AE	0xD7FA      	BRA         L_newPassword82
;KeyPadWithWeb18f4620.c,249 :: 		PORTA &= 0b11111101;
0x02B0	0x0EFD      	MOVLW       253
0x02B2	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,250 :: 		PORTA |= 0b00001000;
0x02B4	0x8680      	BSF         PORTA, 3 
;KeyPadWithWeb18f4620.c,253 :: 		keysPressed = 0;
0x02B6	0x6A5A      	CLRF        newPassword_keysPressed_L0 
0x02B8	0x6A5B      	CLRF        newPassword_keysPressed_L0+1 
;KeyPadWithWeb18f4620.c,254 :: 		i = 0;
0x02BA	0x6A58      	CLRF        newPassword_i_L0 
0x02BC	0x6A59      	CLRF        newPassword_i_L0+1 
;KeyPadWithWeb18f4620.c,255 :: 		counter = 0;
0x02BE	0x6A56      	CLRF        newPassword_counter_L0 
0x02C0	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,256 :: 		while(counter < timeOutLimit && keysPressed < 4){
L_newPassword83:
0x02C2	0x0E80      	MOVLW       128
0x02C4	0x1857      	XORWF       newPassword_counter_L0+1, 0 
0x02C6	0x6E00      	MOVWF       R0 
0x02C8	0x0E80      	MOVLW       128
0x02CA	0x1823      	XORWF       _timeOutLimit+1, 0 
0x02CC	0x5C00      	SUBWF       R0, 0 
0x02CE	0xE102      	BNZ         L__newPassword242
0x02D0	0x5022      	MOVF        _timeOutLimit, 0 
0x02D2	0x5C56      	SUBWF       newPassword_counter_L0, 0 
L__newPassword242:
0x02D4	0xE25D      	BC          L_newPassword84
0x02D6	0x0E80      	MOVLW       128
0x02D8	0x185B      	XORWF       newPassword_keysPressed_L0+1, 0 
0x02DA	0x6E00      	MOVWF       R0 
0x02DC	0x0E80      	MOVLW       128
0x02DE	0x5C00      	SUBWF       R0, 0 
0x02E0	0xE102      	BNZ         L__newPassword243
0x02E2	0x0E04      	MOVLW       4
0x02E4	0x5C5A      	SUBWF       newPassword_keysPressed_L0, 0 
L__newPassword243:
0x02E6	0xE254      	BC          L_newPassword84
L__newPassword215:
;KeyPadWithWeb18f4620.c,257 :: 		if(checkColumn1()){
0x02E8	0xDECB      	RCALL       _checkColumn1
0x02EA	0x5200      	MOVF        R0, 1 
0x02EC	0xE019      	BZ          L_newPassword87
;KeyPadWithWeb18f4620.c,258 :: 		keysPressed++;
0x02EE	0x4A5A      	INFSNZ      newPassword_keysPressed_L0, 1 
0x02F0	0x2A5B      	INCF        newPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,259 :: 		counter = 0;
0x02F2	0x6A56      	CLRF        newPassword_counter_L0 
0x02F4	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,261 :: 		temp2[i] = checkColumn1();
0x02F6	0x0E52      	MOVLW       newPassword_temp2_L0
0x02F8	0x2458      	ADDWF       newPassword_i_L0, 0 
0x02FA	0x6E60      	MOVWF       FLOC__newPassword 
0x02FC	0x0E00      	MOVLW       hi_addr(newPassword_temp2_L0)
0x02FE	0x2059      	ADDWFC      newPassword_i_L0+1, 0 
0x0300	0x6E61      	MOVWF       FLOC__newPassword+1 
0x0302	0xDEBE      	RCALL       _checkColumn1
0x0304	0xFFE1C060  	MOVFF       FLOC__newPassword, FSR1L
0x0308	0xFFE2C061  	MOVFF       FLOC__newPassword+1, FSR1H
0x030C	0xFFE6C000  	MOVFF       R0, POSTINC1
;KeyPadWithWeb18f4620.c,262 :: 		i++;
0x0310	0x4A58      	INFSNZ      newPassword_i_L0, 1 
0x0312	0x2A59      	INCF        newPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,264 :: 		while(PORTB & 0b00011110); //debounce
L_newPassword88:
0x0314	0x0E1E      	MOVLW       30
0x0316	0x1481      	ANDWF       PORTB, 0 
0x0318	0x6E00      	MOVWF       R0 
0x031A	0xE001      	BZ          L_newPassword89
0x031C	0xD7FB      	BRA         L_newPassword88
L_newPassword89:
;KeyPadWithWeb18f4620.c,265 :: 		}
0x031E	0xD037      	BRA         L_newPassword90
L_newPassword87:
;KeyPadWithWeb18f4620.c,266 :: 		else if(checkColumn2()){
0x0320	0xDE7D      	RCALL       _checkColumn2
0x0322	0x5200      	MOVF        R0, 1 
0x0324	0xE019      	BZ          L_newPassword91
;KeyPadWithWeb18f4620.c,267 :: 		keysPressed++;
0x0326	0x4A5A      	INFSNZ      newPassword_keysPressed_L0, 1 
0x0328	0x2A5B      	INCF        newPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,268 :: 		counter = 0;
0x032A	0x6A56      	CLRF        newPassword_counter_L0 
0x032C	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,270 :: 		temp2[i] = checkColumn2();
0x032E	0x0E52      	MOVLW       newPassword_temp2_L0
0x0330	0x2458      	ADDWF       newPassword_i_L0, 0 
0x0332	0x6E60      	MOVWF       FLOC__newPassword 
0x0334	0x0E00      	MOVLW       hi_addr(newPassword_temp2_L0)
0x0336	0x2059      	ADDWFC      newPassword_i_L0+1, 0 
0x0338	0x6E61      	MOVWF       FLOC__newPassword+1 
0x033A	0xDE70      	RCALL       _checkColumn2
0x033C	0xFFE1C060  	MOVFF       FLOC__newPassword, FSR1L
0x0340	0xFFE2C061  	MOVFF       FLOC__newPassword+1, FSR1H
0x0344	0xFFE6C000  	MOVFF       R0, POSTINC1
;KeyPadWithWeb18f4620.c,271 :: 		i++;
0x0348	0x4A58      	INFSNZ      newPassword_i_L0, 1 
0x034A	0x2A59      	INCF        newPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,273 :: 		while(PORTB & 0b00011110); //debounce
L_newPassword92:
0x034C	0x0E1E      	MOVLW       30
0x034E	0x1481      	ANDWF       PORTB, 0 
0x0350	0x6E00      	MOVWF       R0 
0x0352	0xE001      	BZ          L_newPassword93
0x0354	0xD7FB      	BRA         L_newPassword92
L_newPassword93:
;KeyPadWithWeb18f4620.c,274 :: 		}
0x0356	0xD01B      	BRA         L_newPassword94
L_newPassword91:
;KeyPadWithWeb18f4620.c,275 :: 		else if(checkColumn3()){
0x0358	0xDEC5      	RCALL       _checkColumn3
0x035A	0x5200      	MOVF        R0, 1 
0x035C	0xE018      	BZ          L_newPassword95
;KeyPadWithWeb18f4620.c,276 :: 		keysPressed++;
0x035E	0x4A5A      	INFSNZ      newPassword_keysPressed_L0, 1 
0x0360	0x2A5B      	INCF        newPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,277 :: 		counter = 0;
0x0362	0x6A56      	CLRF        newPassword_counter_L0 
0x0364	0x6A57      	CLRF        newPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,279 :: 		temp2[i] = checkColumn3();
0x0366	0x0E52      	MOVLW       newPassword_temp2_L0
0x0368	0x2458      	ADDWF       newPassword_i_L0, 0 
0x036A	0x6E60      	MOVWF       FLOC__newPassword 
0x036C	0x0E00      	MOVLW       hi_addr(newPassword_temp2_L0)
0x036E	0x2059      	ADDWFC      newPassword_i_L0+1, 0 
0x0370	0x6E61      	MOVWF       FLOC__newPassword+1 
0x0372	0xDEB8      	RCALL       _checkColumn3
0x0374	0xFFE1C060  	MOVFF       FLOC__newPassword, FSR1L
0x0378	0xFFE2C061  	MOVFF       FLOC__newPassword+1, FSR1H
0x037C	0xFFE6C000  	MOVFF       R0, POSTINC1
;KeyPadWithWeb18f4620.c,280 :: 		i++;
0x0380	0x4A58      	INFSNZ      newPassword_i_L0, 1 
0x0382	0x2A59      	INCF        newPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,282 :: 		while(PORTB & 0b00011110); //debounce
L_newPassword96:
0x0384	0x0E1E      	MOVLW       30
0x0386	0x1481      	ANDWF       PORTB, 0 
0x0388	0x6E00      	MOVWF       R0 
0x038A	0xE001      	BZ          L_newPassword97
0x038C	0xD7FB      	BRA         L_newPassword96
L_newPassword97:
;KeyPadWithWeb18f4620.c,283 :: 		}
L_newPassword95:
L_newPassword94:
L_newPassword90:
;KeyPadWithWeb18f4620.c,284 :: 		}
0x038E	0xD799      	BRA         L_newPassword83
L_newPassword84:
;KeyPadWithWeb18f4620.c,285 :: 		if(keysPressed != 4)    // the user timed out
0x0390	0x0E00      	MOVLW       0
0x0392	0x185B      	XORWF       newPassword_keysPressed_L0+1, 0 
0x0394	0xE102      	BNZ         L__newPassword244
0x0396	0x0E04      	MOVLW       4
0x0398	0x185A      	XORWF       newPassword_keysPressed_L0, 0 
L__newPassword244:
0x039A	0xE003      	BZ          L_newPassword98
;KeyPadWithWeb18f4620.c,286 :: 		return 0;
0x039C	0x6A00      	CLRF        R0 
0x039E	0x6A01      	CLRF        R1 
0x03A0	0xD052      	BRA         L_end_newPassword
L_newPassword98:
;KeyPadWithWeb18f4620.c,288 :: 		else if(keysPressed == 4){
0x03A2	0x0E00      	MOVLW       0
0x03A4	0x185B      	XORWF       newPassword_keysPressed_L0+1, 0 
0x03A6	0xE102      	BNZ         L__newPassword245
0x03A8	0x0E04      	MOVLW       4
0x03AA	0x185A      	XORWF       newPassword_keysPressed_L0, 0 
L__newPassword245:
0x03AC	0xE14C      	BNZ         L_newPassword100
;KeyPadWithWeb18f4620.c,289 :: 		for(j = 0; j < sizeof(psw); j++){
0x03AE	0x6A5C      	CLRF        newPassword_j_L0 
0x03B0	0x6A5D      	CLRF        newPassword_j_L0+1 
L_newPassword101:
0x03B2	0x0E80      	MOVLW       128
0x03B4	0x185D      	XORWF       newPassword_j_L0+1, 0 
0x03B6	0x6E00      	MOVWF       R0 
0x03B8	0x0E80      	MOVLW       128
0x03BA	0x5C00      	SUBWF       R0, 0 
0x03BC	0xE102      	BNZ         L__newPassword246
0x03BE	0x0E04      	MOVLW       4
0x03C0	0x5C5C      	SUBWF       newPassword_j_L0, 0 
L__newPassword246:
0x03C2	0xE217      	BC          L_newPassword102
;KeyPadWithWeb18f4620.c,290 :: 		if(temp1[j] == temp2[j])
0x03C4	0x0E4E      	MOVLW       newPassword_temp1_L0
0x03C6	0x245C      	ADDWF       newPassword_j_L0, 0 
0x03C8	0x6EE9      	MOVWF       FSR0L 
0x03CA	0x0E00      	MOVLW       hi_addr(newPassword_temp1_L0)
0x03CC	0x205D      	ADDWFC      newPassword_j_L0+1, 0 
0x03CE	0x6EEA      	MOVWF       FSR0H 
0x03D0	0x0E52      	MOVLW       newPassword_temp2_L0
0x03D2	0x245C      	ADDWF       newPassword_j_L0, 0 
0x03D4	0x6ED9      	MOVWF       FSR2L 
0x03D6	0x0E00      	MOVLW       hi_addr(newPassword_temp2_L0)
0x03D8	0x205D      	ADDWFC      newPassword_j_L0+1, 0 
0x03DA	0x6EDA      	MOVWF       FSR2H 
0x03DC	0x50EE      	MOVF        POSTINC0, 0 
0x03DE	0x18DE      	XORWF       POSTINC2, 0 
0x03E0	0xE103      	BNZ         L_newPassword104
;KeyPadWithWeb18f4620.c,291 :: 		confirmed ++;
0x03E2	0x4A5E      	INFSNZ      newPassword_confirmed_L0, 1 
0x03E4	0x2A5F      	INCF        newPassword_confirmed_L0+1, 1 
0x03E6	0xD002      	BRA         L_newPassword105
L_newPassword104:
;KeyPadWithWeb18f4620.c,293 :: 		confirmed = 0;
0x03E8	0x6A5E      	CLRF        newPassword_confirmed_L0 
0x03EA	0x6A5F      	CLRF        newPassword_confirmed_L0+1 
L_newPassword105:
;KeyPadWithWeb18f4620.c,289 :: 		for(j = 0; j < sizeof(psw); j++){
0x03EC	0x4A5C      	INFSNZ      newPassword_j_L0, 1 
0x03EE	0x2A5D      	INCF        newPassword_j_L0+1, 1 
;KeyPadWithWeb18f4620.c,294 :: 		}
0x03F0	0xD7E0      	BRA         L_newPassword101
L_newPassword102:
;KeyPadWithWeb18f4620.c,295 :: 		if(confirmed == sizeof(psw)){  // two passwords match, so change overall password
0x03F2	0x0E00      	MOVLW       0
0x03F4	0x185F      	XORWF       newPassword_confirmed_L0+1, 0 
0x03F6	0xE102      	BNZ         L__newPassword247
0x03F8	0x0E04      	MOVLW       4
0x03FA	0x185E      	XORWF       newPassword_confirmed_L0, 0 
L__newPassword247:
0x03FC	0xE121      	BNZ         L_newPassword106
;KeyPadWithWeb18f4620.c,296 :: 		for(j = 0; j < sizeof(psw); j++){
0x03FE	0x6A5C      	CLRF        newPassword_j_L0 
0x0400	0x6A5D      	CLRF        newPassword_j_L0+1 
L_newPassword107:
0x0402	0x0E80      	MOVLW       128
0x0404	0x185D      	XORWF       newPassword_j_L0+1, 0 
0x0406	0x6E00      	MOVWF       R0 
0x0408	0x0E80      	MOVLW       128
0x040A	0x5C00      	SUBWF       R0, 0 
0x040C	0xE102      	BNZ         L__newPassword248
0x040E	0x0E04      	MOVLW       4
0x0410	0x5C5C      	SUBWF       newPassword_j_L0, 0 
L__newPassword248:
0x0412	0xE211      	BC          L_newPassword108
;KeyPadWithWeb18f4620.c,297 :: 		psw[j] = temp1[j];
0x0414	0x0E19      	MOVLW       _psw
0x0416	0x245C      	ADDWF       newPassword_j_L0, 0 
0x0418	0x6EE1      	MOVWF       FSR1L 
0x041A	0x0E00      	MOVLW       hi_addr(_psw)
0x041C	0x205D      	ADDWFC      newPassword_j_L0+1, 0 
0x041E	0x6EE2      	MOVWF       FSR1H 
0x0420	0x0E4E      	MOVLW       newPassword_temp1_L0
0x0422	0x245C      	ADDWF       newPassword_j_L0, 0 
0x0424	0x6EE9      	MOVWF       FSR0L 
0x0426	0x0E00      	MOVLW       hi_addr(newPassword_temp1_L0)
0x0428	0x205D      	ADDWFC      newPassword_j_L0+1, 0 
0x042A	0x6EEA      	MOVWF       FSR0H 
0x042C	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;KeyPadWithWeb18f4620.c,296 :: 		for(j = 0; j < sizeof(psw); j++){
0x0430	0x4A5C      	INFSNZ      newPassword_j_L0, 1 
0x0432	0x2A5D      	INCF        newPassword_j_L0+1, 1 
;KeyPadWithWeb18f4620.c,298 :: 		}
0x0434	0xD7E6      	BRA         L_newPassword107
L_newPassword108:
;KeyPadWithWeb18f4620.c,299 :: 		return 1;
0x0436	0x0E01      	MOVLW       1
0x0438	0x6E00      	MOVWF       R0 
0x043A	0x0E00      	MOVLW       0
0x043C	0x6E01      	MOVWF       R1 
0x043E	0xD003      	BRA         L_end_newPassword
;KeyPadWithWeb18f4620.c,300 :: 		}
L_newPassword106:
;KeyPadWithWeb18f4620.c,302 :: 		return 0;
0x0440	0x6A00      	CLRF        R0 
0x0442	0x6A01      	CLRF        R1 
0x0444	0xD000      	BRA         L_end_newPassword
;KeyPadWithWeb18f4620.c,303 :: 		}
L_newPassword100:
;KeyPadWithWeb18f4620.c,304 :: 		}
L_newPassword81:
;KeyPadWithWeb18f4620.c,305 :: 		}
L_end_newPassword:
0x0446	0x0012      	RETURN      0
; end of _newPassword
_checkPassword:
;KeyPadWithWeb18f4620.c,122 :: 		int checkPassword(){
;KeyPadWithWeb18f4620.c,123 :: 		int counter = 0;
0x0448	0x6A4E      	CLRF        checkPassword_counter_L0 
0x044A	0x6A4F      	CLRF        checkPassword_counter_L0+1 
0x044C	0x6A50      	CLRF        checkPassword_resetCounter_L0 
0x044E	0x6A51      	CLRF        checkPassword_resetCounter_L0+1 
0x0450	0x6A52      	CLRF        checkPassword_resetCounter_L0+2 
0x0452	0x6A53      	CLRF        checkPassword_resetCounter_L0+3 
0x0454	0x6A54      	CLRF        checkPassword_lockCounter_L0 
0x0456	0x6A55      	CLRF        checkPassword_lockCounter_L0+1 
0x0458	0x6A56      	CLRF        checkPassword_lockCounter_L0+2 
0x045A	0x6A57      	CLRF        checkPassword_lockCounter_L0+3 
0x045C	0x6A58      	CLRF        checkPassword_i_L0 
0x045E	0x6A59      	CLRF        checkPassword_i_L0+1 
0x0460	0x6A5A      	CLRF        checkPassword_keysPressed_L0 
0x0462	0x6A5B      	CLRF        checkPassword_keysPressed_L0+1 
;KeyPadWithWeb18f4620.c,129 :: 		while(1){
L_checkPassword29:
;KeyPadWithWeb18f4620.c,130 :: 		counter++;  //for timeouts
0x0464	0x4A4E      	INFSNZ      checkPassword_counter_L0, 1 
0x0466	0x2A4F      	INCF        checkPassword_counter_L0+1, 1 
;KeyPadWithWeb18f4620.c,131 :: 		if(checkColumn1()){
0x0468	0xDE0B      	RCALL       _checkColumn1
0x046A	0x5200      	MOVF        R0, 1 
0x046C	0xE041      	BZ          L_checkPassword31
;KeyPadWithWeb18f4620.c,132 :: 		keysPressed++;
0x046E	0x4A5A      	INFSNZ      checkPassword_keysPressed_L0, 1 
0x0470	0x2A5B      	INCF        checkPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,133 :: 		counter = 0;  //reset timeout counter
0x0472	0x6A4E      	CLRF        checkPassword_counter_L0 
0x0474	0x6A4F      	CLRF        checkPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,135 :: 		if(checkColumn1() == psw[i]){
0x0476	0xDE04      	RCALL       _checkColumn1
0x0478	0x0E19      	MOVLW       _psw
0x047A	0x2458      	ADDWF       checkPassword_i_L0, 0 
0x047C	0x6ED9      	MOVWF       FSR2L 
0x047E	0x0E00      	MOVLW       hi_addr(_psw)
0x0480	0x2059      	ADDWFC      checkPassword_i_L0+1, 0 
0x0482	0x6EDA      	MOVWF       FSR2H 
0x0484	0x5000      	MOVF        R0, 0 
0x0486	0x18DE      	XORWF       POSTINC2, 0 
0x0488	0xE103      	BNZ         L_checkPassword32
;KeyPadWithWeb18f4620.c,136 :: 		i++;
0x048A	0x4A58      	INFSNZ      checkPassword_i_L0, 1 
0x048C	0x2A59      	INCF        checkPassword_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,137 :: 		}
0x048E	0xD002      	BRA         L_checkPassword33
L_checkPassword32:
;KeyPadWithWeb18f4620.c,139 :: 		i = 0;
0x0490	0x6A58      	CLRF        checkPassword_i_L0 
0x0492	0x6A59      	CLRF        checkPassword_i_L0+1 
L_checkPassword33:
;KeyPadWithWeb18f4620.c,141 :: 		while(PORTB & 0b00010000){ // the asterisk key
L_checkPassword34:
0x0494	0xA881      	BTFSS       PORTB, 4 
0x0496	0xD022      	BRA         L_checkPassword35
;KeyPadWithWeb18f4620.c,142 :: 		resetCounter++;
0x0498	0x0E01      	MOVLW       1
0x049A	0x2650      	ADDWF       checkPassword_resetCounter_L0, 1 
0x049C	0x0E00      	MOVLW       0
0x049E	0x2251      	ADDWFC      checkPassword_resetCounter_L0+1, 1 
0x04A0	0x2252      	ADDWFC      checkPassword_resetCounter_L0+2, 1 
0x04A2	0x2253      	ADDWFC      checkPassword_resetCounter_L0+3, 1 
;KeyPadWithWeb18f4620.c,143 :: 		if((resetCounter >= resetLimit) && (i == 0)){
0x04A4	0x0E80      	MOVLW       128
0x04A6	0x1853      	XORWF       checkPassword_resetCounter_L0+3, 0 
0x04A8	0x6E00      	MOVWF       R0 
0x04AA	0x0E80      	MOVLW       128
0x04AC	0x1818      	XORWF       _resetLimit+3, 0 
0x04AE	0x5C00      	SUBWF       R0, 0 
0x04B0	0xE108      	BNZ         L__checkPassword229
0x04B2	0x5017      	MOVF        _resetLimit+2, 0 
0x04B4	0x5C52      	SUBWF       checkPassword_resetCounter_L0+2, 0 
0x04B6	0xE105      	BNZ         L__checkPassword229
0x04B8	0x5016      	MOVF        _resetLimit+1, 0 
0x04BA	0x5C51      	SUBWF       checkPassword_resetCounter_L0+1, 0 
0x04BC	0xE102      	BNZ         L__checkPassword229
0x04BE	0x5015      	MOVF        _resetLimit, 0 
0x04C0	0x5C50      	SUBWF       checkPassword_resetCounter_L0, 0 
L__checkPassword229:
0x04C2	0xE30B      	BNC         L_checkPassword38
0x04C4	0x0E00      	MOVLW       0
0x04C6	0x1859      	XORWF       checkPassword_i_L0+1, 0 
0x04C8	0xE102      	BNZ         L__checkPassword230
0x04CA	0x0E00      	MOVLW       0
0x04CC	0x1858      	XORWF       checkPassword_i_L0, 0 
L__checkPassword230:
0x04CE	0xE105      	BNZ         L_checkPassword38
L__checkPassword214:
;KeyPadWithWeb18f4620.c,144 :: 		return -1;
0x04D0	0x0EFF      	MOVLW       255
0x04D2	0x6E00      	MOVWF       R0 
0x04D4	0x0EFF      	MOVLW       255
0x04D6	0x6E01      	MOVWF       R1 
0x04D8	0xD09A      	BRA         L_end_checkPassword
;KeyPadWithWeb18f4620.c,145 :: 		}
L_checkPassword38:
;KeyPadWithWeb18f4620.c,146 :: 		}
0x04DA	0xD7DC      	BRA         L_checkPassword34
L_checkPassword35:
;KeyPadWithWeb18f4620.c,147 :: 		resetCounter = 0;
0x04DC	0x6A50      	CLRF        checkPassword_resetCounter_L0 
0x04DE	0x6A51      	CLRF        checkPassword_resetCounter_L0+1 
0x04E0	0x6A52      	CLRF        checkPassword_resetCounter_L0+2 
0x04E2	0x6A53      	CLRF        checkPassword_resetCounter_L0+3 
;KeyPadWithWeb18f4620.c,148 :: 		while(PORTB & 0b00011110); //debounce
L_checkPassword39:
0x04E4	0x0E1E      	MOVLW       30
0x04E6	0x1481      	ANDWF       PORTB, 0 
0x04E8	0x6E00      	MOVWF       R0 
0x04EA	0xE001      	BZ          L_checkPassword40
0x04EC	0xD7FB      	BRA         L_checkPassword39
L_checkPassword40:
;KeyPadWithWeb18f4620.c,149 :: 		}
0x04EE	0xD065      	BRA         L_checkPassword41
L_checkPassword31:
;KeyPadWithWeb18f4620.c,150 :: 		else if(checkColumn2()){
0x04F0	0xDD95      	RCALL       _checkColumn2
0x04F2	0x5200      	MOVF        R0, 1 
0x04F4	0xE019      	BZ          L_checkPassword42
;KeyPadWithWeb18f4620.c,151 :: 		keysPressed++;
0x04F6	0x4A5A      	INFSNZ      checkPassword_keysPressed_L0, 1 
0x04F8	0x2A5B      	INCF        checkPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,152 :: 		counter = 0;
0x04FA	0x6A4E      	CLRF        checkPassword_counter_L0 
0x04FC	0x6A4F      	CLRF        checkPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,154 :: 		if(checkColumn2() == psw[i])
0x04FE	0xDD8E      	RCALL       _checkColumn2
0x0500	0x0E19      	MOVLW       _psw
0x0502	0x2458      	ADDWF       checkPassword_i_L0, 0 
0x0504	0x6ED9      	MOVWF       FSR2L 
0x0506	0x0E00      	MOVLW       hi_addr(_psw)
0x0508	0x2059      	ADDWFC      checkPassword_i_L0+1, 0 
0x050A	0x6EDA      	MOVWF       FSR2H 
0x050C	0x5000      	MOVF        R0, 0 
0x050E	0x18DE      	XORWF       POSTINC2, 0 
0x0510	0xE103      	BNZ         L_checkPassword43
;KeyPadWithWeb18f4620.c,155 :: 		i++;
0x0512	0x4A58      	INFSNZ      checkPassword_i_L0, 1 
0x0514	0x2A59      	INCF        checkPassword_i_L0+1, 1 
0x0516	0xD002      	BRA         L_checkPassword44
L_checkPassword43:
;KeyPadWithWeb18f4620.c,157 :: 		i = 0;
0x0518	0x6A58      	CLRF        checkPassword_i_L0 
0x051A	0x6A59      	CLRF        checkPassword_i_L0+1 
L_checkPassword44:
;KeyPadWithWeb18f4620.c,159 :: 		while(PORTB & 0b00011110); //debounce
L_checkPassword45:
0x051C	0x0E1E      	MOVLW       30
0x051E	0x1481      	ANDWF       PORTB, 0 
0x0520	0x6E00      	MOVWF       R0 
0x0522	0xE001      	BZ          L_checkPassword46
0x0524	0xD7FB      	BRA         L_checkPassword45
L_checkPassword46:
;KeyPadWithWeb18f4620.c,160 :: 		}
0x0526	0xD049      	BRA         L_checkPassword47
L_checkPassword42:
;KeyPadWithWeb18f4620.c,161 :: 		else if(checkColumn3()){
0x0528	0xDDDD      	RCALL       _checkColumn3
0x052A	0x5200      	MOVF        R0, 1 
0x052C	0xE046      	BZ          L_checkPassword48
;KeyPadWithWeb18f4620.c,162 :: 		keysPressed++;
0x052E	0x4A5A      	INFSNZ      checkPassword_keysPressed_L0, 1 
0x0530	0x2A5B      	INCF        checkPassword_keysPressed_L0+1, 1 
;KeyPadWithWeb18f4620.c,163 :: 		counter = 0;
0x0532	0x6A4E      	CLRF        checkPassword_counter_L0 
0x0534	0x6A4F      	CLRF        checkPassword_counter_L0+1 
;KeyPadWithWeb18f4620.c,165 :: 		if(checkColumn3() == psw[i])
0x0536	0xDDD6      	RCALL       _checkColumn3
0x0538	0x0E19      	MOVLW       _psw
0x053A	0x2458      	ADDWF       checkPassword_i_L0, 0 
0x053C	0x6ED9      	MOVWF       FSR2L 
0x053E	0x0E00      	MOVLW       hi_addr(_psw)
0x0540	0x2059      	ADDWFC      checkPassword_i_L0+1, 0 
0x0542	0x6EDA      	MOVWF       FSR2H 
0x0544	0x5000      	MOVF        R0, 0 
0x0546	0x18DE      	XORWF       POSTINC2, 0 
0x0548	0xE103      	BNZ         L_checkPassword49
;KeyPadWithWeb18f4620.c,166 :: 		i++;
0x054A	0x4A58      	INFSNZ      checkPassword_i_L0, 1 
0x054C	0x2A59      	INCF        checkPassword_i_L0+1, 1 
0x054E	0xD002      	BRA         L_checkPassword50
L_checkPassword49:
;KeyPadWithWeb18f4620.c,168 :: 		i = 0;
0x0550	0x6A58      	CLRF        checkPassword_i_L0 
0x0552	0x6A59      	CLRF        checkPassword_i_L0+1 
L_checkPassword50:
;KeyPadWithWeb18f4620.c,170 :: 		while((PORTB & 0b00010000) && (i == 0)){ // the pound key
L_checkPassword51:
0x0554	0xA881      	BTFSS       PORTB, 4 
0x0556	0xD028      	BRA         L_checkPassword52
0x0558	0x0E00      	MOVLW       0
0x055A	0x1859      	XORWF       checkPassword_i_L0+1, 0 
0x055C	0xE102      	BNZ         L__checkPassword231
0x055E	0x0E00      	MOVLW       0
0x0560	0x1858      	XORWF       checkPassword_i_L0, 0 
L__checkPassword231:
0x0562	0xE122      	BNZ         L_checkPassword52
L__checkPassword213:
;KeyPadWithWeb18f4620.c,171 :: 		lockCounter++;
0x0564	0x0E01      	MOVLW       1
0x0566	0x2654      	ADDWF       checkPassword_lockCounter_L0, 1 
0x0568	0x0E00      	MOVLW       0
0x056A	0x2255      	ADDWFC      checkPassword_lockCounter_L0+1, 1 
0x056C	0x2256      	ADDWFC      checkPassword_lockCounter_L0+2, 1 
0x056E	0x2257      	ADDWFC      checkPassword_lockCounter_L0+3, 1 
;KeyPadWithWeb18f4620.c,172 :: 		if((lockCounter >= lockLimit) && (i == 0)){
0x0570	0x0E80      	MOVLW       128
0x0572	0x1857      	XORWF       checkPassword_lockCounter_L0+3, 0 
0x0574	0x6E00      	MOVWF       R0 
0x0576	0x0E80      	MOVLW       128
0x0578	0x1821      	XORWF       _lockLimit+3, 0 
0x057A	0x5C00      	SUBWF       R0, 0 
0x057C	0xE108      	BNZ         L__checkPassword232
0x057E	0x5020      	MOVF        _lockLimit+2, 0 
0x0580	0x5C56      	SUBWF       checkPassword_lockCounter_L0+2, 0 
0x0582	0xE105      	BNZ         L__checkPassword232
0x0584	0x501F      	MOVF        _lockLimit+1, 0 
0x0586	0x5C55      	SUBWF       checkPassword_lockCounter_L0+1, 0 
0x0588	0xE102      	BNZ         L__checkPassword232
0x058A	0x501E      	MOVF        _lockLimit, 0 
0x058C	0x5C54      	SUBWF       checkPassword_lockCounter_L0, 0 
L__checkPassword232:
0x058E	0xE30B      	BNC         L_checkPassword57
0x0590	0x0E00      	MOVLW       0
0x0592	0x1859      	XORWF       checkPassword_i_L0+1, 0 
0x0594	0xE102      	BNZ         L__checkPassword233
0x0596	0x0E00      	MOVLW       0
0x0598	0x1858      	XORWF       checkPassword_i_L0, 0 
L__checkPassword233:
0x059A	0xE105      	BNZ         L_checkPassword57
L__checkPassword212:
;KeyPadWithWeb18f4620.c,173 :: 		return 7;
0x059C	0x0E07      	MOVLW       7
0x059E	0x6E00      	MOVWF       R0 
0x05A0	0x0E00      	MOVLW       0
0x05A2	0x6E01      	MOVWF       R1 
0x05A4	0xD034      	BRA         L_end_checkPassword
;KeyPadWithWeb18f4620.c,174 :: 		}
L_checkPassword57:
;KeyPadWithWeb18f4620.c,175 :: 		}
0x05A6	0xD7D6      	BRA         L_checkPassword51
L_checkPassword52:
;KeyPadWithWeb18f4620.c,176 :: 		lockCounter = 0;
0x05A8	0x6A54      	CLRF        checkPassword_lockCounter_L0 
0x05AA	0x6A55      	CLRF        checkPassword_lockCounter_L0+1 
0x05AC	0x6A56      	CLRF        checkPassword_lockCounter_L0+2 
0x05AE	0x6A57      	CLRF        checkPassword_lockCounter_L0+3 
;KeyPadWithWeb18f4620.c,178 :: 		while(PORTB & 0b00011110); //debounce
L_checkPassword58:
0x05B0	0x0E1E      	MOVLW       30
0x05B2	0x1481      	ANDWF       PORTB, 0 
0x05B4	0x6E00      	MOVWF       R0 
0x05B6	0xE001      	BZ          L_checkPassword59
0x05B8	0xD7FB      	BRA         L_checkPassword58
L_checkPassword59:
;KeyPadWithWeb18f4620.c,179 :: 		}
L_checkPassword48:
L_checkPassword47:
L_checkPassword41:
;KeyPadWithWeb18f4620.c,181 :: 		if(counter >= timeOutLimit)    // timeout
0x05BA	0x0E80      	MOVLW       128
0x05BC	0x184F      	XORWF       checkPassword_counter_L0+1, 0 
0x05BE	0x6E00      	MOVWF       R0 
0x05C0	0x0E80      	MOVLW       128
0x05C2	0x1823      	XORWF       _timeOutLimit+1, 0 
0x05C4	0x5C00      	SUBWF       R0, 0 
0x05C6	0xE102      	BNZ         L__checkPassword234
0x05C8	0x5022      	MOVF        _timeOutLimit, 0 
0x05CA	0x5C4E      	SUBWF       checkPassword_counter_L0, 0 
L__checkPassword234:
0x05CC	0xE303      	BNC         L_checkPassword60
;KeyPadWithWeb18f4620.c,182 :: 		return 0;
0x05CE	0x6A00      	CLRF        R0 
0x05D0	0x6A01      	CLRF        R1 
0x05D2	0xD01D      	BRA         L_end_checkPassword
L_checkPassword60:
;KeyPadWithWeb18f4620.c,184 :: 		if(keysPressed == 4){
0x05D4	0x0E00      	MOVLW       0
0x05D6	0x185B      	XORWF       checkPassword_keysPressed_L0+1, 0 
0x05D8	0xE102      	BNZ         L__checkPassword235
0x05DA	0x0E04      	MOVLW       4
0x05DC	0x185A      	XORWF       checkPassword_keysPressed_L0, 0 
L__checkPassword235:
0x05DE	0xE116      	BNZ         L_checkPassword61
;KeyPadWithWeb18f4620.c,185 :: 		if(i == 4){
0x05E0	0x0E00      	MOVLW       0
0x05E2	0x1859      	XORWF       checkPassword_i_L0+1, 0 
0x05E4	0xE102      	BNZ         L__checkPassword236
0x05E6	0x0E04      	MOVLW       4
0x05E8	0x1858      	XORWF       checkPassword_i_L0, 0 
L__checkPassword236:
0x05EA	0xE109      	BNZ         L_checkPassword62
;KeyPadWithWeb18f4620.c,186 :: 		i = 0;
0x05EC	0x6A58      	CLRF        checkPassword_i_L0 
0x05EE	0x6A59      	CLRF        checkPassword_i_L0+1 
;KeyPadWithWeb18f4620.c,187 :: 		keysPressed = 0;
0x05F0	0x6A5A      	CLRF        checkPassword_keysPressed_L0 
0x05F2	0x6A5B      	CLRF        checkPassword_keysPressed_L0+1 
;KeyPadWithWeb18f4620.c,188 :: 		return 1;   // the password was correct
0x05F4	0x0E01      	MOVLW       1
0x05F6	0x6E00      	MOVWF       R0 
0x05F8	0x0E00      	MOVLW       0
0x05FA	0x6E01      	MOVWF       R1 
0x05FC	0xD008      	BRA         L_end_checkPassword
;KeyPadWithWeb18f4620.c,189 :: 		}
L_checkPassword62:
;KeyPadWithWeb18f4620.c,191 :: 		i = 0;
0x05FE	0x6A58      	CLRF        checkPassword_i_L0 
0x0600	0x6A59      	CLRF        checkPassword_i_L0+1 
;KeyPadWithWeb18f4620.c,192 :: 		keysPressed = 0;
0x0602	0x6A5A      	CLRF        checkPassword_keysPressed_L0 
0x0604	0x6A5B      	CLRF        checkPassword_keysPressed_L0+1 
;KeyPadWithWeb18f4620.c,193 :: 		return 0;  // the password was wrong
0x0606	0x6A00      	CLRF        R0 
0x0608	0x6A01      	CLRF        R1 
0x060A	0xD001      	BRA         L_end_checkPassword
;KeyPadWithWeb18f4620.c,195 :: 		}
L_checkPassword61:
;KeyPadWithWeb18f4620.c,196 :: 		}
0x060C	0xD72B      	BRA         L_checkPassword29
;KeyPadWithWeb18f4620.c,197 :: 		}
L_end_checkPassword:
0x060E	0x0012      	RETURN      0
; end of _checkPassword
_resetMode:
;KeyPadWithWeb18f4620.c,308 :: 		void resetMode(){
;KeyPadWithWeb18f4620.c,309 :: 		PORTA &= 0b11110111; //flashes blue LED indicating that the current password should be input
0x0610	0x0EF7      	MOVLW       247
0x0612	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,310 :: 		delay_ms(15);
0x0614	0x0E27      	MOVLW       39
0x0616	0x6E0C      	MOVWF       R12, 0
0x0618	0x0EF5      	MOVLW       245
0x061A	0x6E0D      	MOVWF       R13, 0
L_resetMode111:
0x061C	0x2E0D      	DECFSZ      R13, 1, 0
0x061E	0xD7FE      	BRA         L_resetMode111
0x0620	0x2E0C      	DECFSZ      R12, 1, 0
0x0622	0xD7FC      	BRA         L_resetMode111
;KeyPadWithWeb18f4620.c,311 :: 		PORTA |= 0b00001000;
0x0624	0x8680      	BSF         PORTA, 3 
;KeyPadWithWeb18f4620.c,313 :: 		if(checkPassword() == 1){ // password verified time to enter & verify new password
0x0626	0xDF10      	RCALL       _checkPassword
0x0628	0x0E00      	MOVLW       0
0x062A	0x1801      	XORWF       R1, 0 
0x062C	0xE102      	BNZ         L__resetMode250
0x062E	0x0E01      	MOVLW       1
0x0630	0x1800      	XORWF       R0, 0 
L__resetMode250:
0x0632	0xE127      	BNZ         L_resetMode112
;KeyPadWithWeb18f4620.c,314 :: 		PORTA |= 0b00001010; //green LED
0x0634	0x0E0A      	MOVLW       10
0x0636	0x1280      	IORWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,315 :: 		delay_ms(delay1);
0x0638	0x0E03      	MOVLW       3
0x063A	0x6E0B      	MOVWF       R11, 0
0x063C	0x0E08      	MOVLW       8
0x063E	0x6E0C      	MOVWF       R12, 0
0x0640	0x0E77      	MOVLW       119
0x0642	0x6E0D      	MOVWF       R13, 0
L_resetMode113:
0x0644	0x2E0D      	DECFSZ      R13, 1, 0
0x0646	0xD7FE      	BRA         L_resetMode113
0x0648	0x2E0C      	DECFSZ      R12, 1, 0
0x064A	0xD7FC      	BRA         L_resetMode113
0x064C	0x2E0B      	DECFSZ      R11, 1, 0
0x064E	0xD7FA      	BRA         L_resetMode113
;KeyPadWithWeb18f4620.c,316 :: 		PORTA &= 0b11111101;
0x0650	0x0EFD      	MOVLW       253
0x0652	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,319 :: 		if(newPassword()){   //prompts for new password, confirms, and changes
0x0654	0xDD9B      	RCALL       _newPassword
0x0656	0x5000      	MOVF        R0, 0 
0x0658	0x1001      	IORWF       R1, 0 
0x065A	0xE011      	BZ          L_resetMode114
;KeyPadWithWeb18f4620.c,320 :: 		PORTA |= 0b00001010;  //green LED
0x065C	0x0E0A      	MOVLW       10
0x065E	0x1280      	IORWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,321 :: 		delay_ms(delay1);
0x0660	0x0E03      	MOVLW       3
0x0662	0x6E0B      	MOVWF       R11, 0
0x0664	0x0E08      	MOVLW       8
0x0666	0x6E0C      	MOVWF       R12, 0
0x0668	0x0E77      	MOVLW       119
0x066A	0x6E0D      	MOVWF       R13, 0
L_resetMode115:
0x066C	0x2E0D      	DECFSZ      R13, 1, 0
0x066E	0xD7FE      	BRA         L_resetMode115
0x0670	0x2E0C      	DECFSZ      R12, 1, 0
0x0672	0xD7FC      	BRA         L_resetMode115
0x0674	0x2E0B      	DECFSZ      R11, 1, 0
0x0676	0xD7FA      	BRA         L_resetMode115
;KeyPadWithWeb18f4620.c,322 :: 		PORTA &= 0b11111101;
0x0678	0x0EFD      	MOVLW       253
0x067A	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,324 :: 		}
0x067C	0xD001      	BRA         L_resetMode116
L_resetMode114:
;KeyPadWithWeb18f4620.c,326 :: 		PORTA |= 0b00000100;  //red led
0x067E	0x8480      	BSF         PORTA, 2 
;KeyPadWithWeb18f4620.c,328 :: 		}
L_resetMode116:
;KeyPadWithWeb18f4620.c,329 :: 		}
0x0680	0xD001      	BRA         L_resetMode117
L_resetMode112:
;KeyPadWithWeb18f4620.c,331 :: 		PORTA |= 0b00000100; //red led
0x0682	0x8480      	BSF         PORTA, 2 
;KeyPadWithWeb18f4620.c,334 :: 		}
L_resetMode117:
;KeyPadWithWeb18f4620.c,335 :: 		}
L_end_resetMode:
0x0684	0x0012      	RETURN      0
; end of _resetMode
_getCommand:
;KeyPadWithWeb18f4620.c,388 :: 		int getCommand(void){
;KeyPadWithWeb18f4620.c,390 :: 		long j = 0;
;KeyPadWithWeb18f4620.c,391 :: 		int i = 0;
0x0686	0x0ED8      	MOVLW       ?ICSgetCommand_i_L0
0x0688	0x6EF6      	MOVWF       4086 
0x068A	0x0E0C      	MOVLW       hi_addr(?ICSgetCommand_i_L0)
0x068C	0x6EF7      	MOVWF       TBLPTRH 
0x068E	0x0E00      	MOVLW       higher_addr(?ICSgetCommand_i_L0)
0x0690	0x6EF8      	MOVWF       TBLPTRU 
0x0692	0x0E28      	MOVLW       getCommand_i_L0
0x0694	0x6EE1      	MOVWF       FSR1L 
0x0696	0x0E00      	MOVLW       hi_addr(getCommand_i_L0)
0x0698	0x6EE2      	MOVWF       FSR1H 
0x069A	0x0E14      	MOVLW       20
0x069C	0x6E00      	MOVWF       R0 
0x069E	0x0E01      	MOVLW       1
0x06A0	0x6E01      	MOVWF       R1 
0x06A2	0xDD52      	RCALL       ___CC2DW
;KeyPadWithWeb18f4620.c,401 :: 		for(i = 0; i < 9; i++ ){  //all 8 bits of data and the closing bracket. 9 total
0x06A4	0x6A28      	CLRF        getCommand_i_L0 
0x06A6	0x6A29      	CLRF        getCommand_i_L0+1 
L_getCommand142:
0x06A8	0x0E80      	MOVLW       128
0x06AA	0x1829      	XORWF       getCommand_i_L0+1, 0 
0x06AC	0x6E00      	MOVWF       R0 
0x06AE	0x0E80      	MOVLW       128
0x06B0	0x5C00      	SUBWF       R0, 0 
0x06B2	0xE102      	BNZ         L__getCommand262
0x06B4	0x0E09      	MOVLW       9
0x06B6	0x5C28      	SUBWF       getCommand_i_L0, 0 
L__getCommand262:
0x06B8	0xE258      	BC          L_getCommand143
;KeyPadWithWeb18f4620.c,402 :: 		while((!(PORTC & pulsePin))  ){ //  && (j < timeOut)){ // wait till pulse starts
L_getCommand145:
0x06BA	0xBA82      	BTFSC       PORTC, 5 
0x06BC	0xD001      	BRA         L_getCommand146
;KeyPadWithWeb18f4620.c,404 :: 		}
0x06BE	0xD7FD      	BRA         L_getCommand145
L_getCommand146:
;KeyPadWithWeb18f4620.c,405 :: 		delay_ms(1); //tiny delay to ensure we have good data before writing it
0x06C0	0x0E03      	MOVLW       3
0x06C2	0x6E0C      	MOVWF       R12, 0
0x06C4	0x0E97      	MOVLW       151
0x06C6	0x6E0D      	MOVWF       R13, 0
L_getCommand147:
0x06C8	0x2E0D      	DECFSZ      R13, 1, 0
0x06CA	0xD7FE      	BRA         L_getCommand147
0x06CC	0x2E0C      	DECFSZ      R12, 1, 0
0x06CE	0xD7FC      	BRA         L_getCommand147
0x06D0	0x0000      	NOP
0x06D2	0x0000      	NOP
;KeyPadWithWeb18f4620.c,407 :: 		if( i < 8)
0x06D4	0x0E80      	MOVLW       128
0x06D6	0x1829      	XORWF       getCommand_i_L0+1, 0 
0x06D8	0x6E00      	MOVWF       R0 
0x06DA	0x0E80      	MOVLW       128
0x06DC	0x5C00      	SUBWF       R0, 0 
0x06DE	0xE102      	BNZ         L__getCommand263
0x06E0	0x0E08      	MOVLW       8
0x06E2	0x5C28      	SUBWF       getCommand_i_L0, 0 
L__getCommand263:
0x06E4	0xE218      	BC          L_getCommand148
;KeyPadWithWeb18f4620.c,408 :: 		commandTemp[i] = (PORTC & dataPin); // WRITE DATA
0x06E6	0xF000C028  	MOVFF       getCommand_i_L0, R0
0x06EA	0xF001C029  	MOVFF       getCommand_i_L0+1, R1
0x06EE	0x3600      	RLCF        R0, 1 
0x06F0	0x9000      	BCF         R0, 0 
0x06F2	0x3601      	RLCF        R1, 1 
0x06F4	0x0E3C      	MOVLW       getCommand_commandTemp_L0
0x06F6	0x2400      	ADDWF       R0, 0 
0x06F8	0x6EE1      	MOVWF       FSR1L 
0x06FA	0x0E00      	MOVLW       hi_addr(getCommand_commandTemp_L0)
0x06FC	0x2001      	ADDWFC      R1, 0 
0x06FE	0x6EE2      	MOVWF       FSR1H 
0x0700	0x0E10      	MOVLW       16
0x0702	0x1482      	ANDWF       PORTC, 0 
0x0704	0x6E00      	MOVWF       R0 
0x0706	0x0E00      	MOVLW       0
0x0708	0x0B00      	ANDLW       0
0x070A	0x6E01      	MOVWF       R1 
0x070C	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0710	0xFFE6C001  	MOVFF       R1, POSTINC1
0x0714	0xD01A      	BRA         L_getCommand149
L_getCommand148:
;KeyPadWithWeb18f4620.c,409 :: 		else if(i == 8)
0x0716	0x0E00      	MOVLW       0
0x0718	0x1829      	XORWF       getCommand_i_L0+1, 0 
0x071A	0xE102      	BNZ         L__getCommand264
0x071C	0x0E08      	MOVLW       8
0x071E	0x1828      	XORWF       getCommand_i_L0, 0 
L__getCommand264:
0x0720	0xE114      	BNZ         L_getCommand150
;KeyPadWithWeb18f4620.c,410 :: 		commandTemp[i] = (PORTC & (dataPin + parityPin));  // closing bracket
0x0722	0xF000C028  	MOVFF       getCommand_i_L0, R0
0x0726	0xF001C029  	MOVFF       getCommand_i_L0+1, R1
0x072A	0x3600      	RLCF        R0, 1 
0x072C	0x9000      	BCF         R0, 0 
0x072E	0x3601      	RLCF        R1, 1 
0x0730	0x0E3C      	MOVLW       getCommand_commandTemp_L0
0x0732	0x2400      	ADDWF       R0, 0 
0x0734	0x6EE1      	MOVWF       FSR1L 
0x0736	0x0E00      	MOVLW       hi_addr(getCommand_commandTemp_L0)
0x0738	0x2001      	ADDWFC      R1, 0 
0x073A	0x6EE2      	MOVWF       FSR1H 
0x073C	0x0E50      	MOVLW       80
0x073E	0x1482      	ANDWF       PORTC, 0 
0x0740	0x6E00      	MOVWF       R0 
0x0742	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0746	0x0E00      	MOVLW       0
0x0748	0x6EE6      	MOVWF       POSTINC1 
L_getCommand150:
L_getCommand149:
;KeyPadWithWeb18f4620.c,412 :: 		while((PORTC & pulsePin)  ){   //&& (j < timeOut)){ // wait till pulse is over
L_getCommand151:
0x074A	0xAA82      	BTFSS       PORTC, 5 
0x074C	0xD001      	BRA         L_getCommand152
;KeyPadWithWeb18f4620.c,414 :: 		}
0x074E	0xD7FD      	BRA         L_getCommand151
L_getCommand152:
;KeyPadWithWeb18f4620.c,415 :: 		delay_ms(1); //tiny delay to ensure pulse is really over before starting again
0x0750	0x0E03      	MOVLW       3
0x0752	0x6E0C      	MOVWF       R12, 0
0x0754	0x0E97      	MOVLW       151
0x0756	0x6E0D      	MOVWF       R13, 0
L_getCommand153:
0x0758	0x2E0D      	DECFSZ      R13, 1, 0
0x075A	0xD7FE      	BRA         L_getCommand153
0x075C	0x2E0C      	DECFSZ      R12, 1, 0
0x075E	0xD7FC      	BRA         L_getCommand153
0x0760	0x0000      	NOP
0x0762	0x0000      	NOP
;KeyPadWithWeb18f4620.c,401 :: 		for(i = 0; i < 9; i++ ){  //all 8 bits of data and the closing bracket. 9 total
0x0764	0x4A28      	INFSNZ      getCommand_i_L0, 1 
0x0766	0x2A29      	INCF        getCommand_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,419 :: 		}
0x0768	0xD79F      	BRA         L_getCommand142
L_getCommand143:
;KeyPadWithWeb18f4620.c,420 :: 		PORTA = 0x00;
0x076A	0x6A80      	CLRF        PORTA 
;KeyPadWithWeb18f4620.c,422 :: 		if((commandTemp[8] == (dataPin + parityPin))   ){  // && (j < timeOut)){  //all went well
0x076C	0x0E00      	MOVLW       0
0x076E	0x184D      	XORWF       getCommand_commandTemp_L0+17, 0 
0x0770	0xE102      	BNZ         L__getCommand265
0x0772	0x0E50      	MOVLW       80
0x0774	0x184C      	XORWF       getCommand_commandTemp_L0+16, 0 
L__getCommand265:
0x0776	0xE143      	BNZ         L_getCommand154
;KeyPadWithWeb18f4620.c,423 :: 		result = 0;
0x0778	0x6A2A      	CLRF        getCommand_result_L0 
0x077A	0x6A2B      	CLRF        getCommand_result_L0+1 
;KeyPadWithWeb18f4620.c,424 :: 		for (i = 0; i<9; i++){
0x077C	0x6A28      	CLRF        getCommand_i_L0 
0x077E	0x6A29      	CLRF        getCommand_i_L0+1 
L_getCommand155:
0x0780	0x0E80      	MOVLW       128
0x0782	0x1829      	XORWF       getCommand_i_L0+1, 0 
0x0784	0x6E00      	MOVWF       R0 
0x0786	0x0E80      	MOVLW       128
0x0788	0x5C00      	SUBWF       R0, 0 
0x078A	0xE102      	BNZ         L__getCommand266
0x078C	0x0E09      	MOVLW       9
0x078E	0x5C28      	SUBWF       getCommand_i_L0, 0 
L__getCommand266:
0x0790	0xE231      	BC          L_getCommand156
;KeyPadWithWeb18f4620.c,425 :: 		if (commandTemp[i] && (i<8)){
0x0792	0xF000C028  	MOVFF       getCommand_i_L0, R0
0x0796	0xF001C029  	MOVFF       getCommand_i_L0+1, R1
0x079A	0x3600      	RLCF        R0, 1 
0x079C	0x9000      	BCF         R0, 0 
0x079E	0x3601      	RLCF        R1, 1 
0x07A0	0x0E3C      	MOVLW       getCommand_commandTemp_L0
0x07A2	0x2400      	ADDWF       R0, 0 
0x07A4	0x6EE9      	MOVWF       FSR0L 
0x07A6	0x0E00      	MOVLW       hi_addr(getCommand_commandTemp_L0)
0x07A8	0x2001      	ADDWFC      R1, 0 
0x07AA	0x6EEA      	MOVWF       FSR0H 
0x07AC	0xF000CFEE  	MOVFF       POSTINC0, R0
0x07B0	0xF001CFEE  	MOVFF       POSTINC0, R1
0x07B4	0x5000      	MOVF        R0, 0 
0x07B6	0x1001      	IORWF       R1, 0 
0x07B8	0xE01A      	BZ          L_getCommand160
0x07BA	0x0E80      	MOVLW       128
0x07BC	0x1829      	XORWF       getCommand_i_L0+1, 0 
0x07BE	0x6E00      	MOVWF       R0 
0x07C0	0x0E80      	MOVLW       128
0x07C2	0x5C00      	SUBWF       R0, 0 
0x07C4	0xE102      	BNZ         L__getCommand267
0x07C6	0x0E08      	MOVLW       8
0x07C8	0x5C28      	SUBWF       getCommand_i_L0, 0 
L__getCommand267:
0x07CA	0xE211      	BC          L_getCommand160
L__getCommand221:
;KeyPadWithWeb18f4620.c,426 :: 		result += binaryArray[i];
0x07CC	0xF000C028  	MOVFF       getCommand_i_L0, R0
0x07D0	0xF001C029  	MOVFF       getCommand_i_L0+1, R1
0x07D4	0x3600      	RLCF        R0, 1 
0x07D6	0x9000      	BCF         R0, 0 
0x07D8	0x3601      	RLCF        R1, 1 
0x07DA	0x0E2C      	MOVLW       getCommand_binaryArray_L0
0x07DC	0x2400      	ADDWF       R0, 0 
0x07DE	0x6ED9      	MOVWF       FSR2L 
0x07E0	0x0E00      	MOVLW       hi_addr(getCommand_binaryArray_L0)
0x07E2	0x2001      	ADDWFC      R1, 0 
0x07E4	0x6EDA      	MOVWF       FSR2H 
0x07E6	0x50DE      	MOVF        POSTINC2, 0 
0x07E8	0x262A      	ADDWF       getCommand_result_L0, 1 
0x07EA	0x50DE      	MOVF        POSTINC2, 0 
0x07EC	0x222B      	ADDWFC      getCommand_result_L0+1, 1 
;KeyPadWithWeb18f4620.c,427 :: 		}
L_getCommand160:
;KeyPadWithWeb18f4620.c,424 :: 		for (i = 0; i<9; i++){
0x07EE	0x4A28      	INFSNZ      getCommand_i_L0, 1 
0x07F0	0x2A29      	INCF        getCommand_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,428 :: 		}
0x07F2	0xD7C6      	BRA         L_getCommand155
L_getCommand156:
;KeyPadWithWeb18f4620.c,429 :: 		return result;
0x07F4	0xF000C02A  	MOVFF       getCommand_result_L0, R0
0x07F8	0xF001C02B  	MOVFF       getCommand_result_L0+1, R1
0x07FC	0xD009      	BRA         L_end_getCommand
;KeyPadWithWeb18f4620.c,430 :: 		}
L_getCommand154:
;KeyPadWithWeb18f4620.c,434 :: 		while(PORTC & 0b01110000);  // wait until port B is clean before continuing
L_getCommand162:
0x07FE	0x0E70      	MOVLW       112
0x0800	0x1482      	ANDWF       PORTC, 0 
0x0802	0x6E00      	MOVWF       R0 
0x0804	0xE001      	BZ          L_getCommand163
0x0806	0xD7FB      	BRA         L_getCommand162
L_getCommand163:
;KeyPadWithWeb18f4620.c,435 :: 		return -1;  //something is wrong
0x0808	0x0EFF      	MOVLW       255
0x080A	0x6E00      	MOVWF       R0 
0x080C	0x0EFF      	MOVLW       255
0x080E	0x6E01      	MOVWF       R1 
;KeyPadWithWeb18f4620.c,437 :: 		}
L_end_getCommand:
0x0810	0x0012      	RETURN      0
; end of _getCommand
_init_ports:
;KeyPadWithWeb18f4620.c,28 :: 		void init_ports(){
;KeyPadWithWeb18f4620.c,29 :: 		PORTB = 0;               //initializes port for use  (keypad on PORTB)
0x0812	0x6A81      	CLRF        PORTB 
;KeyPadWithWeb18f4620.c,30 :: 		TRISB = 0b00011111;      // data direction control, 0 for output 1 for input
0x0814	0x0E1F      	MOVLW       31
0x0816	0x6E93      	MOVWF       TRISB 
;KeyPadWithWeb18f4620.c,31 :: 		PORTC = 0x00;
0x0818	0x6A82      	CLRF        PORTC 
;KeyPadWithWeb18f4620.c,32 :: 		TRISC = 0b11110000; //RC4, RC5, and RC6 for web and RC7 for toggle button
0x081A	0x0EF0      	MOVLW       240
0x081C	0x6E94      	MOVWF       TRISC 
;KeyPadWithWeb18f4620.c,33 :: 		PORTA = 0x00;               // 0 is output
0x081E	0x6A80      	CLRF        PORTA 
;KeyPadWithWeb18f4620.c,34 :: 		TRISA &= 0b00000001;
0x0820	0x0E01      	MOVLW       1
0x0822	0x1692      	ANDWF       TRISA, 1 
;KeyPadWithWeb18f4620.c,35 :: 		PORTD = 0x00;
0x0824	0x6A83      	CLRF        PORTD 
;KeyPadWithWeb18f4620.c,36 :: 		TRISD = 0x00;
0x0826	0x6A95      	CLRF        TRISD 
;KeyPadWithWeb18f4620.c,38 :: 		}
L_end_init_ports:
0x0828	0x0012      	RETURN      0
; end of _init_ports
_ADCInit:
;KeyPadWithWeb18f4620.c,41 :: 		void ADCInit(){ //configuring A/D module
;KeyPadWithWeb18f4620.c,42 :: 		ADCON1 = 0b00000111; //channels AN8-An12 are digital and AN0-AN7 are analog
0x082A	0x0E07      	MOVLW       7
0x082C	0x6EC1      	MOVWF       ADCON1 
;KeyPadWithWeb18f4620.c,45 :: 		ADCON2 = 0x8A; //Right justified, Tad=2xacquisition time
0x082E	0x0E8A      	MOVLW       138
0x0830	0x6EC0      	MOVWF       ADCON2 
;KeyPadWithWeb18f4620.c,47 :: 		}
L_end_ADCInit:
0x0832	0x0012      	RETURN      0
; end of _ADCInit
_moveUnlock:
;KeyPadWithWeb18f4620.c,362 :: 		void moveUnlock(){
;KeyPadWithWeb18f4620.c,363 :: 		long moveTimer = 800000;
0x0834	0x0E00      	MOVLW       0
0x0836	0x6E28      	MOVWF       moveUnlock_moveTimer_L0 
0x0838	0x0E35      	MOVLW       53
0x083A	0x6E29      	MOVWF       moveUnlock_moveTimer_L0+1 
0x083C	0x0E0C      	MOVLW       12
0x083E	0x6E2A      	MOVWF       moveUnlock_moveTimer_L0+2 
0x0840	0x0E00      	MOVLW       0
0x0842	0x6E2B      	MOVWF       moveUnlock_moveTimer_L0+3 
0x0844	0x6A2C      	CLRF        moveUnlock_j_L0 
0x0846	0x6A2D      	CLRF        moveUnlock_j_L0+1 
;KeyPadWithWeb18f4620.c,365 :: 		PORTA |= 0b00100010;  //lock direction
0x0848	0x0E22      	MOVLW       34
0x084A	0x1280      	IORWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,366 :: 		delay_ms(50); //avoid voltage spike
0x084C	0x0E82      	MOVLW       130
0x084E	0x6E0C      	MOVWF       R12, 0
0x0850	0x0EDD      	MOVLW       221
0x0852	0x6E0D      	MOVWF       R13, 0
L_moveUnlock130:
0x0854	0x2E0D      	DECFSZ      R13, 1, 0
0x0856	0xD7FE      	BRA         L_moveUnlock130
0x0858	0x2E0C      	DECFSZ      R12, 1, 0
0x085A	0xD7FC      	BRA         L_moveUnlock130
0x085C	0x0000      	NOP
0x085E	0x0000      	NOP
;KeyPadWithWeb18f4620.c,368 :: 		while((ADCRead(0) >= 165) && j<moveTimer){
L_moveUnlock131:
0x0860	0x6A4E      	CLRF        FARG_ADCRead_ch 
0x0862	0xDC7A      	RCALL       _ADCRead
0x0864	0x0E80      	MOVLW       128
0x0866	0x1801      	XORWF       R1, 0 
0x0868	0x6E02      	MOVWF       R2 
0x086A	0x0E80      	MOVLW       128
0x086C	0x5C02      	SUBWF       R2, 0 
0x086E	0xE102      	BNZ         L__moveUnlock257
0x0870	0x0EA5      	MOVLW       165
0x0872	0x5C00      	SUBWF       R0, 0 
L__moveUnlock257:
0x0874	0xE318      	BNC         L_moveUnlock132
0x0876	0x0E80      	MOVLW       128
0x0878	0xBE2D      	BTFSC       moveUnlock_j_L0+1, 7 
0x087A	0x0E7F      	MOVLW       127
0x087C	0x6E00      	MOVWF       R0 
0x087E	0x0E80      	MOVLW       128
0x0880	0x182B      	XORWF       moveUnlock_moveTimer_L0+3, 0 
0x0882	0x5C00      	SUBWF       R0, 0 
0x0884	0xE10C      	BNZ         L__moveUnlock258
0x0886	0x0E00      	MOVLW       0
0x0888	0xBE2D      	BTFSC       moveUnlock_j_L0+1, 7 
0x088A	0x0EFF      	MOVLW       255
0x088C	0x6E00      	MOVWF       R0 
0x088E	0x502A      	MOVF        moveUnlock_moveTimer_L0+2, 0 
0x0890	0x5C00      	SUBWF       R0, 0 
0x0892	0xE105      	BNZ         L__moveUnlock258
0x0894	0x5029      	MOVF        moveUnlock_moveTimer_L0+1, 0 
0x0896	0x5C2D      	SUBWF       moveUnlock_j_L0+1, 0 
0x0898	0xE102      	BNZ         L__moveUnlock258
0x089A	0x5028      	MOVF        moveUnlock_moveTimer_L0, 0 
0x089C	0x5C2C      	SUBWF       moveUnlock_j_L0, 0 
L__moveUnlock258:
0x089E	0xE203      	BC          L_moveUnlock132
L__moveUnlock220:
;KeyPadWithWeb18f4620.c,369 :: 		j++;
0x08A0	0x4A2C      	INFSNZ      moveUnlock_j_L0, 1 
0x08A2	0x2A2D      	INCF        moveUnlock_j_L0+1, 1 
;KeyPadWithWeb18f4620.c,370 :: 		}
0x08A4	0xD7DD      	BRA         L_moveUnlock131
L_moveUnlock132:
;KeyPadWithWeb18f4620.c,372 :: 		j=0;
0x08A6	0x6A2C      	CLRF        moveUnlock_j_L0 
0x08A8	0x6A2D      	CLRF        moveUnlock_j_L0+1 
;KeyPadWithWeb18f4620.c,373 :: 		PORTA &= 0b11011111;  //turn off
0x08AA	0x0EDF      	MOVLW       223
0x08AC	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,374 :: 		delay_ms(100);
0x08AE	0x0E02      	MOVLW       2
0x08B0	0x6E0B      	MOVWF       R11, 0
0x08B2	0x0E04      	MOVLW       4
0x08B4	0x6E0C      	MOVWF       R12, 0
0x08B6	0x0EBA      	MOVLW       186
0x08B8	0x6E0D      	MOVWF       R13, 0
L_moveUnlock135:
0x08BA	0x2E0D      	DECFSZ      R13, 1, 0
0x08BC	0xD7FE      	BRA         L_moveUnlock135
0x08BE	0x2E0C      	DECFSZ      R12, 1, 0
0x08C0	0xD7FC      	BRA         L_moveUnlock135
0x08C2	0x2E0B      	DECFSZ      R11, 1, 0
0x08C4	0xD7FA      	BRA         L_moveUnlock135
0x08C6	0x0000      	NOP
;KeyPadWithWeb18f4620.c,375 :: 		PORTA |= 0b00010000;  //unlock direction
0x08C8	0x8880      	BSF         PORTA, 4 
;KeyPadWithWeb18f4620.c,376 :: 		delay_ms(50); //voltage spike protection
0x08CA	0x0E82      	MOVLW       130
0x08CC	0x6E0C      	MOVWF       R12, 0
0x08CE	0x0EDD      	MOVLW       221
0x08D0	0x6E0D      	MOVWF       R13, 0
L_moveUnlock136:
0x08D2	0x2E0D      	DECFSZ      R13, 1, 0
0x08D4	0xD7FE      	BRA         L_moveUnlock136
0x08D6	0x2E0C      	DECFSZ      R12, 1, 0
0x08D8	0xD7FC      	BRA         L_moveUnlock136
0x08DA	0x0000      	NOP
0x08DC	0x0000      	NOP
;KeyPadWithWeb18f4620.c,378 :: 		while((ADCRead(0) <= 300) && j<moveTimer){  //home position
L_moveUnlock137:
0x08DE	0x6A4E      	CLRF        FARG_ADCRead_ch 
0x08E0	0xDC3B      	RCALL       _ADCRead
0x08E2	0x0E80      	MOVLW       128
0x08E4	0x0A01      	XORLW       1
0x08E6	0x6E02      	MOVWF       R2 
0x08E8	0x0E80      	MOVLW       128
0x08EA	0x1801      	XORWF       R1, 0 
0x08EC	0x5C02      	SUBWF       R2, 0 
0x08EE	0xE102      	BNZ         L__moveUnlock259
0x08F0	0x5000      	MOVF        R0, 0 
0x08F2	0x082C      	SUBLW       44
L__moveUnlock259:
0x08F4	0xE318      	BNC         L_moveUnlock138
0x08F6	0x0E80      	MOVLW       128
0x08F8	0xBE2D      	BTFSC       moveUnlock_j_L0+1, 7 
0x08FA	0x0E7F      	MOVLW       127
0x08FC	0x6E00      	MOVWF       R0 
0x08FE	0x0E80      	MOVLW       128
0x0900	0x182B      	XORWF       moveUnlock_moveTimer_L0+3, 0 
0x0902	0x5C00      	SUBWF       R0, 0 
0x0904	0xE10C      	BNZ         L__moveUnlock260
0x0906	0x0E00      	MOVLW       0
0x0908	0xBE2D      	BTFSC       moveUnlock_j_L0+1, 7 
0x090A	0x0EFF      	MOVLW       255
0x090C	0x6E00      	MOVWF       R0 
0x090E	0x502A      	MOVF        moveUnlock_moveTimer_L0+2, 0 
0x0910	0x5C00      	SUBWF       R0, 0 
0x0912	0xE105      	BNZ         L__moveUnlock260
0x0914	0x5029      	MOVF        moveUnlock_moveTimer_L0+1, 0 
0x0916	0x5C2D      	SUBWF       moveUnlock_j_L0+1, 0 
0x0918	0xE102      	BNZ         L__moveUnlock260
0x091A	0x5028      	MOVF        moveUnlock_moveTimer_L0, 0 
0x091C	0x5C2C      	SUBWF       moveUnlock_j_L0, 0 
L__moveUnlock260:
0x091E	0xE203      	BC          L_moveUnlock138
L__moveUnlock219:
;KeyPadWithWeb18f4620.c,379 :: 		j++;
0x0920	0x4A2C      	INFSNZ      moveUnlock_j_L0, 1 
0x0922	0x2A2D      	INCF        moveUnlock_j_L0+1, 1 
;KeyPadWithWeb18f4620.c,380 :: 		}
0x0924	0xD7DC      	BRA         L_moveUnlock137
L_moveUnlock138:
;KeyPadWithWeb18f4620.c,382 :: 		PORTA &= 0b11101111;
0x0926	0x0EEF      	MOVLW       239
0x0928	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,383 :: 		j=0;
0x092A	0x6A2C      	CLRF        moveUnlock_j_L0 
0x092C	0x6A2D      	CLRF        moveUnlock_j_L0+1 
;KeyPadWithWeb18f4620.c,384 :: 		delay_ms(2);
0x092E	0x0E06      	MOVLW       6
0x0930	0x6E0C      	MOVWF       R12, 0
0x0932	0x0E30      	MOVLW       48
0x0934	0x6E0D      	MOVWF       R13, 0
L_moveUnlock141:
0x0936	0x2E0D      	DECFSZ      R13, 1, 0
0x0938	0xD7FE      	BRA         L_moveUnlock141
0x093A	0x2E0C      	DECFSZ      R12, 1, 0
0x093C	0xD7FC      	BRA         L_moveUnlock141
0x093E	0x0000      	NOP
;KeyPadWithWeb18f4620.c,385 :: 		}
L_end_moveUnlock:
0x0940	0x0012      	RETURN      0
; end of _moveUnlock
_moveLock:
;KeyPadWithWeb18f4620.c,338 :: 		void moveLock(){
;KeyPadWithWeb18f4620.c,339 :: 		long moveTimer = 800000;
0x0942	0x0E00      	MOVLW       0
0x0944	0x6E28      	MOVWF       moveLock_moveTimer_L0 
0x0946	0x0E35      	MOVLW       53
0x0948	0x6E29      	MOVWF       moveLock_moveTimer_L0+1 
0x094A	0x0E0C      	MOVLW       12
0x094C	0x6E2A      	MOVWF       moveLock_moveTimer_L0+2 
0x094E	0x0E00      	MOVLW       0
0x0950	0x6E2B      	MOVWF       moveLock_moveTimer_L0+3 
0x0952	0x6A2C      	CLRF        moveLock_j_L0 
0x0954	0x6A2D      	CLRF        moveLock_j_L0+1 
;KeyPadWithWeb18f4620.c,341 :: 		PORTA |= 0b00010010;  //unlock direction
0x0956	0x0E12      	MOVLW       18
0x0958	0x1280      	IORWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,342 :: 		delay_ms(50); //avoid voltage spike
0x095A	0x0E82      	MOVLW       130
0x095C	0x6E0C      	MOVWF       R12, 0
0x095E	0x0EDD      	MOVLW       221
0x0960	0x6E0D      	MOVWF       R13, 0
L_moveLock118:
0x0962	0x2E0D      	DECFSZ      R13, 1, 0
0x0964	0xD7FE      	BRA         L_moveLock118
0x0966	0x2E0C      	DECFSZ      R12, 1, 0
0x0968	0xD7FC      	BRA         L_moveLock118
0x096A	0x0000      	NOP
0x096C	0x0000      	NOP
;KeyPadWithWeb18f4620.c,344 :: 		while((ADCRead(0) <= 600) && j<moveTimer){ //wait until motor has moved far enough
L_moveLock119:
0x096E	0x6A4E      	CLRF        FARG_ADCRead_ch 
0x0970	0xF000ECAC  	CALL        _ADCRead, 0
0x0974	0x0E80      	MOVLW       128
0x0976	0x0A02      	XORLW       2
0x0978	0x6E02      	MOVWF       R2 
0x097A	0x0E80      	MOVLW       128
0x097C	0x1801      	XORWF       R1, 0 
0x097E	0x5C02      	SUBWF       R2, 0 
0x0980	0xE102      	BNZ         L__moveLock252
0x0982	0x5000      	MOVF        R0, 0 
0x0984	0x0858      	SUBLW       88
L__moveLock252:
0x0986	0xE318      	BNC         L_moveLock120
0x0988	0x0E80      	MOVLW       128
0x098A	0xBE2D      	BTFSC       moveLock_j_L0+1, 7 
0x098C	0x0E7F      	MOVLW       127
0x098E	0x6E00      	MOVWF       R0 
0x0990	0x0E80      	MOVLW       128
0x0992	0x182B      	XORWF       moveLock_moveTimer_L0+3, 0 
0x0994	0x5C00      	SUBWF       R0, 0 
0x0996	0xE10C      	BNZ         L__moveLock253
0x0998	0x0E00      	MOVLW       0
0x099A	0xBE2D      	BTFSC       moveLock_j_L0+1, 7 
0x099C	0x0EFF      	MOVLW       255
0x099E	0x6E00      	MOVWF       R0 
0x09A0	0x502A      	MOVF        moveLock_moveTimer_L0+2, 0 
0x09A2	0x5C00      	SUBWF       R0, 0 
0x09A4	0xE105      	BNZ         L__moveLock253
0x09A6	0x5029      	MOVF        moveLock_moveTimer_L0+1, 0 
0x09A8	0x5C2D      	SUBWF       moveLock_j_L0+1, 0 
0x09AA	0xE102      	BNZ         L__moveLock253
0x09AC	0x5028      	MOVF        moveLock_moveTimer_L0, 0 
0x09AE	0x5C2C      	SUBWF       moveLock_j_L0, 0 
L__moveLock253:
0x09B0	0xE203      	BC          L_moveLock120
L__moveLock218:
;KeyPadWithWeb18f4620.c,345 :: 		j++;  //wait, count though
0x09B2	0x4A2C      	INFSNZ      moveLock_j_L0, 1 
0x09B4	0x2A2D      	INCF        moveLock_j_L0+1, 1 
;KeyPadWithWeb18f4620.c,346 :: 		}
0x09B6	0xD7DB      	BRA         L_moveLock119
L_moveLock120:
;KeyPadWithWeb18f4620.c,347 :: 		j=0;
0x09B8	0x6A2C      	CLRF        moveLock_j_L0 
0x09BA	0x6A2D      	CLRF        moveLock_j_L0+1 
;KeyPadWithWeb18f4620.c,348 :: 		PORTA &= 0b11101111; //turn motor off
0x09BC	0x0EEF      	MOVLW       239
0x09BE	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,349 :: 		delay_ms(100);
0x09C0	0x0E02      	MOVLW       2
0x09C2	0x6E0B      	MOVWF       R11, 0
0x09C4	0x0E04      	MOVLW       4
0x09C6	0x6E0C      	MOVWF       R12, 0
0x09C8	0x0EBA      	MOVLW       186
0x09CA	0x6E0D      	MOVWF       R13, 0
L_moveLock123:
0x09CC	0x2E0D      	DECFSZ      R13, 1, 0
0x09CE	0xD7FE      	BRA         L_moveLock123
0x09D0	0x2E0C      	DECFSZ      R12, 1, 0
0x09D2	0xD7FC      	BRA         L_moveLock123
0x09D4	0x2E0B      	DECFSZ      R11, 1, 0
0x09D6	0xD7FA      	BRA         L_moveLock123
0x09D8	0x0000      	NOP
;KeyPadWithWeb18f4620.c,350 :: 		PORTA |= 0b00100010; // lock direction
0x09DA	0x0E22      	MOVLW       34
0x09DC	0x1280      	IORWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,351 :: 		delay_ms(50); //to allow any voltage spike to simmer down
0x09DE	0x0E82      	MOVLW       130
0x09E0	0x6E0C      	MOVWF       R12, 0
0x09E2	0x0EDD      	MOVLW       221
0x09E4	0x6E0D      	MOVWF       R13, 0
L_moveLock124:
0x09E6	0x2E0D      	DECFSZ      R13, 1, 0
0x09E8	0xD7FE      	BRA         L_moveLock124
0x09EA	0x2E0C      	DECFSZ      R12, 1, 0
0x09EC	0xD7FC      	BRA         L_moveLock124
0x09EE	0x0000      	NOP
0x09F0	0x0000      	NOP
;KeyPadWithWeb18f4620.c,353 :: 		while((ADCRead(0) >=300) && j<moveTimer){ //wait for Home position
L_moveLock125:
0x09F2	0x6A4E      	CLRF        FARG_ADCRead_ch 
0x09F4	0xF000ECAC  	CALL        _ADCRead, 0
0x09F8	0x0E80      	MOVLW       128
0x09FA	0x1801      	XORWF       R1, 0 
0x09FC	0x6E02      	MOVWF       R2 
0x09FE	0x0E80      	MOVLW       128
0x0A00	0x0A01      	XORLW       1
0x0A02	0x5C02      	SUBWF       R2, 0 
0x0A04	0xE102      	BNZ         L__moveLock254
0x0A06	0x0E2C      	MOVLW       44
0x0A08	0x5C00      	SUBWF       R0, 0 
L__moveLock254:
0x0A0A	0xE318      	BNC         L_moveLock126
0x0A0C	0x0E80      	MOVLW       128
0x0A0E	0xBE2D      	BTFSC       moveLock_j_L0+1, 7 
0x0A10	0x0E7F      	MOVLW       127
0x0A12	0x6E00      	MOVWF       R0 
0x0A14	0x0E80      	MOVLW       128
0x0A16	0x182B      	XORWF       moveLock_moveTimer_L0+3, 0 
0x0A18	0x5C00      	SUBWF       R0, 0 
0x0A1A	0xE10C      	BNZ         L__moveLock255
0x0A1C	0x0E00      	MOVLW       0
0x0A1E	0xBE2D      	BTFSC       moveLock_j_L0+1, 7 
0x0A20	0x0EFF      	MOVLW       255
0x0A22	0x6E00      	MOVWF       R0 
0x0A24	0x502A      	MOVF        moveLock_moveTimer_L0+2, 0 
0x0A26	0x5C00      	SUBWF       R0, 0 
0x0A28	0xE105      	BNZ         L__moveLock255
0x0A2A	0x5029      	MOVF        moveLock_moveTimer_L0+1, 0 
0x0A2C	0x5C2D      	SUBWF       moveLock_j_L0+1, 0 
0x0A2E	0xE102      	BNZ         L__moveLock255
0x0A30	0x5028      	MOVF        moveLock_moveTimer_L0, 0 
0x0A32	0x5C2C      	SUBWF       moveLock_j_L0, 0 
L__moveLock255:
0x0A34	0xE203      	BC          L_moveLock126
L__moveLock217:
;KeyPadWithWeb18f4620.c,354 :: 		j++;
0x0A36	0x4A2C      	INFSNZ      moveLock_j_L0, 1 
0x0A38	0x2A2D      	INCF        moveLock_j_L0+1, 1 
;KeyPadWithWeb18f4620.c,355 :: 		}
0x0A3A	0xD7DB      	BRA         L_moveLock125
L_moveLock126:
;KeyPadWithWeb18f4620.c,357 :: 		j=0;
0x0A3C	0x6A2C      	CLRF        moveLock_j_L0 
0x0A3E	0x6A2D      	CLRF        moveLock_j_L0+1 
;KeyPadWithWeb18f4620.c,358 :: 		PORTA &= 0b11011111;
0x0A40	0x0EDF      	MOVLW       223
0x0A42	0x1680      	ANDWF       PORTA, 1 
;KeyPadWithWeb18f4620.c,359 :: 		delay_ms(2);
0x0A44	0x0E06      	MOVLW       6
0x0A46	0x6E0C      	MOVWF       R12, 0
0x0A48	0x0E30      	MOVLW       48
0x0A4A	0x6E0D      	MOVWF       R13, 0
L_moveLock129:
0x0A4C	0x2E0D      	DECFSZ      R13, 1, 0
0x0A4E	0xD7FE      	BRA         L_moveLock129
0x0A50	0x2E0C      	DECFSZ      R12, 1, 0
0x0A52	0xD7FC      	BRA         L_moveLock129
0x0A54	0x0000      	NOP
;KeyPadWithWeb18f4620.c,360 :: 		}
L_end_moveLock:
0x0A56	0x0012      	RETURN      0
; end of _moveLock
_sendStatus:
;KeyPadWithWeb18f4620.c,441 :: 		void sendStatus(char doorStatus){  // o = on, f = off
;KeyPadWithWeb18f4620.c,442 :: 		int i = 0;
0x0A58	0x6A29      	CLRF        sendStatus_i_L0 
0x0A5A	0x6A2A      	CLRF        sendStatus_i_L0+1 
;KeyPadWithWeb18f4620.c,443 :: 		PORTC &= 0b10001111;
0x0A5C	0x0E8F      	MOVLW       143
0x0A5E	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,445 :: 		TRISC &= 0b10101111;// changes to output leaves pulse pin as an input
0x0A60	0x0EAF      	MOVLW       175
0x0A62	0x1694      	ANDWF       TRISC, 1 
;KeyPadWithWeb18f4620.c,446 :: 		delay_ms(5);
0x0A64	0x0E0D      	MOVLW       13
0x0A66	0x6E0C      	MOVWF       R12, 0
0x0A68	0x0EFB      	MOVLW       251
0x0A6A	0x6E0D      	MOVWF       R13, 0
L_sendStatus164:
0x0A6C	0x2E0D      	DECFSZ      R13, 1, 0
0x0A6E	0xD7FE      	BRA         L_sendStatus164
0x0A70	0x2E0C      	DECFSZ      R12, 1, 0
0x0A72	0xD7FC      	BRA         L_sendStatus164
0x0A74	0x0000      	NOP
0x0A76	0x0000      	NOP
;KeyPadWithWeb18f4620.c,447 :: 		PORTC |= (parityPin + dataPin); //stick out our thumb
0x0A78	0x0E50      	MOVLW       80
0x0A7A	0x1282      	IORWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,451 :: 		while(!(PORTC & pulsePin));// wait for ardi pulse
L_sendStatus165:
0x0A7C	0xBA82      	BTFSC       PORTC, 5 
0x0A7E	0xD001      	BRA         L_sendStatus166
0x0A80	0xD7FD      	BRA         L_sendStatus165
L_sendStatus166:
;KeyPadWithWeb18f4620.c,452 :: 		delay_ms(1);
0x0A82	0x0E03      	MOVLW       3
0x0A84	0x6E0C      	MOVWF       R12, 0
0x0A86	0x0E97      	MOVLW       151
0x0A88	0x6E0D      	MOVWF       R13, 0
L_sendStatus167:
0x0A8A	0x2E0D      	DECFSZ      R13, 1, 0
0x0A8C	0xD7FE      	BRA         L_sendStatus167
0x0A8E	0x2E0C      	DECFSZ      R12, 1, 0
0x0A90	0xD7FC      	BRA         L_sendStatus167
0x0A92	0x0000      	NOP
0x0A94	0x0000      	NOP
;KeyPadWithWeb18f4620.c,453 :: 		while(!(PORTC & pulsePin));
L_sendStatus168:
0x0A96	0xBA82      	BTFSC       PORTC, 5 
0x0A98	0xD001      	BRA         L_sendStatus169
0x0A9A	0xD7FD      	BRA         L_sendStatus168
L_sendStatus169:
;KeyPadWithWeb18f4620.c,454 :: 		delay_ms(1);
0x0A9C	0x0E03      	MOVLW       3
0x0A9E	0x6E0C      	MOVWF       R12, 0
0x0AA0	0x0E97      	MOVLW       151
0x0AA2	0x6E0D      	MOVWF       R13, 0
L_sendStatus170:
0x0AA4	0x2E0D      	DECFSZ      R13, 1, 0
0x0AA6	0xD7FE      	BRA         L_sendStatus170
0x0AA8	0x2E0C      	DECFSZ      R12, 1, 0
0x0AAA	0xD7FC      	BRA         L_sendStatus170
0x0AAC	0x0000      	NOP
0x0AAE	0x0000      	NOP
;KeyPadWithWeb18f4620.c,455 :: 		while(PORTC & pulsePin); //wait for pulse to end
L_sendStatus171:
0x0AB0	0xAA82      	BTFSS       PORTC, 5 
0x0AB2	0xD001      	BRA         L_sendStatus172
0x0AB4	0xD7FD      	BRA         L_sendStatus171
L_sendStatus172:
;KeyPadWithWeb18f4620.c,456 :: 		delay_ms(5); //give ardi time to change dataDirection, usually real quick (5)
0x0AB6	0x0E0D      	MOVLW       13
0x0AB8	0x6E0C      	MOVWF       R12, 0
0x0ABA	0x0EFB      	MOVLW       251
0x0ABC	0x6E0D      	MOVWF       R13, 0
L_sendStatus173:
0x0ABE	0x2E0D      	DECFSZ      R13, 1, 0
0x0AC0	0xD7FE      	BRA         L_sendStatus173
0x0AC2	0x2E0C      	DECFSZ      R12, 1, 0
0x0AC4	0xD7FC      	BRA         L_sendStatus173
0x0AC6	0x0000      	NOP
0x0AC8	0x0000      	NOP
;KeyPadWithWeb18f4620.c,457 :: 		PORTC &= 0b10001111;
0x0ACA	0x0E8F      	MOVLW       143
0x0ACC	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,458 :: 		delay_ms(1);
0x0ACE	0x0E03      	MOVLW       3
0x0AD0	0x6E0C      	MOVWF       R12, 0
0x0AD2	0x0E97      	MOVLW       151
0x0AD4	0x6E0D      	MOVWF       R13, 0
L_sendStatus174:
0x0AD6	0x2E0D      	DECFSZ      R13, 1, 0
0x0AD8	0xD7FE      	BRA         L_sendStatus174
0x0ADA	0x2E0C      	DECFSZ      R12, 1, 0
0x0ADC	0xD7FC      	BRA         L_sendStatus174
0x0ADE	0x0000      	NOP
0x0AE0	0x0000      	NOP
;KeyPadWithWeb18f4620.c,459 :: 		TRISC &= 0b10001111; //lastly puts pulse pin to output
0x0AE2	0x0E8F      	MOVLW       143
0x0AE4	0x1694      	ANDWF       TRISC, 1 
;KeyPadWithWeb18f4620.c,462 :: 		if(doorStatus == 'l'){  //0b11111111
0x0AE6	0x5028      	MOVF        FARG_sendStatus_doorStatus, 0 
0x0AE8	0x0A6C      	XORLW       108
0x0AEA	0xE127      	BNZ         L_sendStatus175
;KeyPadWithWeb18f4620.c,463 :: 		for(i=0; i<8; i++){
0x0AEC	0x6A29      	CLRF        sendStatus_i_L0 
0x0AEE	0x6A2A      	CLRF        sendStatus_i_L0+1 
L_sendStatus176:
0x0AF0	0x0E80      	MOVLW       128
0x0AF2	0x182A      	XORWF       sendStatus_i_L0+1, 0 
0x0AF4	0x6E00      	MOVWF       R0 
0x0AF6	0x0E80      	MOVLW       128
0x0AF8	0x5C00      	SUBWF       R0, 0 
0x0AFA	0xE102      	BNZ         L__sendStatus269
0x0AFC	0x0E08      	MOVLW       8
0x0AFE	0x5C29      	SUBWF       sendStatus_i_L0, 0 
L__sendStatus269:
0x0B00	0xE21B      	BC          L_sendStatus177
;KeyPadWithWeb18f4620.c,465 :: 		PORTC |= dataPin;
0x0B02	0x8882      	BSF         PORTC, 4 
;KeyPadWithWeb18f4620.c,466 :: 		PORTC |= pulsePin;
0x0B04	0x8A82      	BSF         PORTC, 5 
;KeyPadWithWeb18f4620.c,468 :: 		delay_ms(pulseDelay);
0x0B06	0x0E0D      	MOVLW       13
0x0B08	0x6E0C      	MOVWF       R12, 0
0x0B0A	0x0EFB      	MOVLW       251
0x0B0C	0x6E0D      	MOVWF       R13, 0
L_sendStatus179:
0x0B0E	0x2E0D      	DECFSZ      R13, 1, 0
0x0B10	0xD7FE      	BRA         L_sendStatus179
0x0B12	0x2E0C      	DECFSZ      R12, 1, 0
0x0B14	0xD7FC      	BRA         L_sendStatus179
0x0B16	0x0000      	NOP
0x0B18	0x0000      	NOP
;KeyPadWithWeb18f4620.c,469 :: 		PORTC &= 0b10001111;  //clears comm pins
0x0B1A	0x0E8F      	MOVLW       143
0x0B1C	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,470 :: 		delay_ms(pulseDelay);
0x0B1E	0x0E0D      	MOVLW       13
0x0B20	0x6E0C      	MOVWF       R12, 0
0x0B22	0x0EFB      	MOVLW       251
0x0B24	0x6E0D      	MOVWF       R13, 0
L_sendStatus180:
0x0B26	0x2E0D      	DECFSZ      R13, 1, 0
0x0B28	0xD7FE      	BRA         L_sendStatus180
0x0B2A	0x2E0C      	DECFSZ      R12, 1, 0
0x0B2C	0xD7FC      	BRA         L_sendStatus180
0x0B2E	0x0000      	NOP
0x0B30	0x0000      	NOP
;KeyPadWithWeb18f4620.c,463 :: 		for(i=0; i<8; i++){
0x0B32	0x4A29      	INFSNZ      sendStatus_i_L0, 1 
0x0B34	0x2A2A      	INCF        sendStatus_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,471 :: 		}
0x0B36	0xD7DC      	BRA         L_sendStatus176
L_sendStatus177:
;KeyPadWithWeb18f4620.c,472 :: 		}
0x0B38	0xD036      	BRA         L_sendStatus181
L_sendStatus175:
;KeyPadWithWeb18f4620.c,473 :: 		else if(doorStatus == 'u'){ //0b11110000 turns all pins to zero
0x0B3A	0x5028      	MOVF        FARG_sendStatus_doorStatus, 0 
0x0B3C	0x0A75      	XORLW       117
0x0B3E	0xE133      	BNZ         L_sendStatus182
;KeyPadWithWeb18f4620.c,474 :: 		for(i=0; i<8; i++){
0x0B40	0x6A29      	CLRF        sendStatus_i_L0 
0x0B42	0x6A2A      	CLRF        sendStatus_i_L0+1 
L_sendStatus183:
0x0B44	0x0E80      	MOVLW       128
0x0B46	0x182A      	XORWF       sendStatus_i_L0+1, 0 
0x0B48	0x6E00      	MOVWF       R0 
0x0B4A	0x0E80      	MOVLW       128
0x0B4C	0x5C00      	SUBWF       R0, 0 
0x0B4E	0xE102      	BNZ         L__sendStatus270
0x0B50	0x0E08      	MOVLW       8
0x0B52	0x5C29      	SUBWF       sendStatus_i_L0, 0 
L__sendStatus270:
0x0B54	0xE228      	BC          L_sendStatus184
;KeyPadWithWeb18f4620.c,475 :: 		if(i<4){
0x0B56	0x0E80      	MOVLW       128
0x0B58	0x182A      	XORWF       sendStatus_i_L0+1, 0 
0x0B5A	0x6E00      	MOVWF       R0 
0x0B5C	0x0E80      	MOVLW       128
0x0B5E	0x5C00      	SUBWF       R0, 0 
0x0B60	0xE102      	BNZ         L__sendStatus271
0x0B62	0x0E04      	MOVLW       4
0x0B64	0x5C29      	SUBWF       sendStatus_i_L0, 0 
L__sendStatus271:
0x0B66	0xE204      	BC          L_sendStatus186
;KeyPadWithWeb18f4620.c,476 :: 		PORTC &= 0b10001111; //clear
0x0B68	0x0E8F      	MOVLW       143
0x0B6A	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,477 :: 		PORTC |= pulsePin;  //pulse
0x0B6C	0x8A82      	BSF         PORTC, 5 
;KeyPadWithWeb18f4620.c,478 :: 		}
0x0B6E	0xD002      	BRA         L_sendStatus187
L_sendStatus186:
;KeyPadWithWeb18f4620.c,480 :: 		PORTC |= dataPin;
0x0B70	0x8882      	BSF         PORTC, 4 
;KeyPadWithWeb18f4620.c,481 :: 		PORTC |= pulsePin;
0x0B72	0x8A82      	BSF         PORTC, 5 
;KeyPadWithWeb18f4620.c,482 :: 		}
L_sendStatus187:
;KeyPadWithWeb18f4620.c,483 :: 		delay_ms(pulseDelay);
0x0B74	0x0E0D      	MOVLW       13
0x0B76	0x6E0C      	MOVWF       R12, 0
0x0B78	0x0EFB      	MOVLW       251
0x0B7A	0x6E0D      	MOVWF       R13, 0
L_sendStatus188:
0x0B7C	0x2E0D      	DECFSZ      R13, 1, 0
0x0B7E	0xD7FE      	BRA         L_sendStatus188
0x0B80	0x2E0C      	DECFSZ      R12, 1, 0
0x0B82	0xD7FC      	BRA         L_sendStatus188
0x0B84	0x0000      	NOP
0x0B86	0x0000      	NOP
;KeyPadWithWeb18f4620.c,484 :: 		PORTC &= 0b10001111;  //clears comm pins
0x0B88	0x0E8F      	MOVLW       143
0x0B8A	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,485 :: 		delay_ms(pulseDelay);
0x0B8C	0x0E0D      	MOVLW       13
0x0B8E	0x6E0C      	MOVWF       R12, 0
0x0B90	0x0EFB      	MOVLW       251
0x0B92	0x6E0D      	MOVWF       R13, 0
L_sendStatus189:
0x0B94	0x2E0D      	DECFSZ      R13, 1, 0
0x0B96	0xD7FE      	BRA         L_sendStatus189
0x0B98	0x2E0C      	DECFSZ      R12, 1, 0
0x0B9A	0xD7FC      	BRA         L_sendStatus189
0x0B9C	0x0000      	NOP
0x0B9E	0x0000      	NOP
;KeyPadWithWeb18f4620.c,474 :: 		for(i=0; i<8; i++){
0x0BA0	0x4A29      	INFSNZ      sendStatus_i_L0, 1 
0x0BA2	0x2A2A      	INCF        sendStatus_i_L0+1, 1 
;KeyPadWithWeb18f4620.c,486 :: 		}
0x0BA4	0xD7CF      	BRA         L_sendStatus183
L_sendStatus184:
;KeyPadWithWeb18f4620.c,487 :: 		}
L_sendStatus182:
L_sendStatus181:
;KeyPadWithWeb18f4620.c,489 :: 		PORTC |= 0b01010000;
0x0BA6	0x0E50      	MOVLW       80
0x0BA8	0x1282      	IORWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,490 :: 		PORTC |= pulsePin;
0x0BAA	0x8A82      	BSF         PORTC, 5 
;KeyPadWithWeb18f4620.c,491 :: 		delay_ms(pulseDelay);
0x0BAC	0x0E0D      	MOVLW       13
0x0BAE	0x6E0C      	MOVWF       R12, 0
0x0BB0	0x0EFB      	MOVLW       251
0x0BB2	0x6E0D      	MOVWF       R13, 0
L_sendStatus190:
0x0BB4	0x2E0D      	DECFSZ      R13, 1, 0
0x0BB6	0xD7FE      	BRA         L_sendStatus190
0x0BB8	0x2E0C      	DECFSZ      R12, 1, 0
0x0BBA	0xD7FC      	BRA         L_sendStatus190
0x0BBC	0x0000      	NOP
0x0BBE	0x0000      	NOP
;KeyPadWithWeb18f4620.c,492 :: 		PORTC &= 0b10001111; //clear comm pins
0x0BC0	0x0E8F      	MOVLW       143
0x0BC2	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,493 :: 		TRISC |= 0b01110000;  //sets comm pins back to input
0x0BC4	0x0E70      	MOVLW       112
0x0BC6	0x1294      	IORWF       TRISC, 1 
;KeyPadWithWeb18f4620.c,494 :: 		return;
;KeyPadWithWeb18f4620.c,495 :: 		}
L_end_sendStatus:
0x0BC8	0x0012      	RETURN      0
; end of _sendStatus
_main:
0x0BCA	0xF006EC7E  	CALL        3324, 0
;KeyPadWithWeb18f4620.c,499 :: 		void main() {
;KeyPadWithWeb18f4620.c,500 :: 		int input = 0;
0x0BCE	0x6A24      	CLRF        main_input_L0 
0x0BD0	0x6A25      	CLRF        main_input_L0+1 
0x0BD2	0x6A26      	CLRF        main_keypadCmd_L0 
0x0BD4	0x6A27      	CLRF        main_keypadCmd_L0+1 
;KeyPadWithWeb18f4620.c,505 :: 		init_ports();
0x0BD6	0xDE1D      	RCALL       _init_ports
;KeyPadWithWeb18f4620.c,506 :: 		ADCInit();  // initialize A/D
0x0BD8	0xDE28      	RCALL       _ADCInit
;KeyPadWithWeb18f4620.c,511 :: 		while(1){
L_main191:
;KeyPadWithWeb18f4620.c,513 :: 		if((PORTC & 0b01010000) == 0b01010000){ //opening frame. The arduino is sending a command
0x0BDA	0x0E50      	MOVLW       80
0x0BDC	0x1482      	ANDWF       PORTC, 0 
0x0BDE	0x6E01      	MOVWF       R1 
0x0BE0	0x5001      	MOVF        R1, 0 
0x0BE2	0x0A50      	XORLW       80
0x0BE4	0xE114      	BNZ         L_main193
;KeyPadWithWeb18f4620.c,514 :: 		keypadCmd = getCommand();
0x0BE6	0xDD4F      	RCALL       _getCommand
0x0BE8	0xF026C000  	MOVFF       R0, main_keypadCmd_L0
0x0BEC	0xF027C001  	MOVFF       R1, main_keypadCmd_L0+1
;KeyPadWithWeb18f4620.c,517 :: 		if(keypadCmd == unlockDoorCmd){
0x0BF0	0x5001      	MOVF        R1, 0 
0x0BF2	0x0A00      	XORLW       0
0x0BF4	0xE102      	BNZ         L__main273
0x0BF6	0x0EFF      	MOVLW       255
0x0BF8	0x1800      	XORWF       R0, 0 
L__main273:
0x0BFA	0xE102      	BNZ         L_main194
;KeyPadWithWeb18f4620.c,518 :: 		moveUnlock();
0x0BFC	0xDE1B      	RCALL       _moveUnlock
;KeyPadWithWeb18f4620.c,519 :: 		}
0x0BFE	0xD007      	BRA         L_main195
L_main194:
;KeyPadWithWeb18f4620.c,520 :: 		else if(keypadCmd == lockDoorCmd){
0x0C00	0x5027      	MOVF        main_keypadCmd_L0+1, 0 
0x0C02	0x0A00      	XORLW       0
0x0C04	0xE102      	BNZ         L__main274
0x0C06	0x0E00      	MOVLW       0
0x0C08	0x1826      	XORWF       main_keypadCmd_L0, 0 
L__main274:
0x0C0A	0xE101      	BNZ         L_main196
;KeyPadWithWeb18f4620.c,521 :: 		moveLock();
0x0C0C	0xDE9A      	RCALL       _moveLock
;KeyPadWithWeb18f4620.c,522 :: 		}
L_main196:
L_main195:
;KeyPadWithWeb18f4620.c,523 :: 		}
L_main193:
;KeyPadWithWeb18f4620.c,526 :: 		if(PORTC & 0b10000000){ //direction from the wall panel, toggles on or off
0x0C0E	0xAE82      	BTFSS       PORTC, 7 
0x0C10	0xD01A      	BRA         L_main197
;KeyPadWithWeb18f4620.c,527 :: 		delay_ms(15); 		//noise check
0x0C12	0x0E27      	MOVLW       39
0x0C14	0x6E0C      	MOVWF       R12, 0
0x0C16	0x0EF5      	MOVLW       245
0x0C18	0x6E0D      	MOVWF       R13, 0
L_main198:
0x0C1A	0x2E0D      	DECFSZ      R13, 1, 0
0x0C1C	0xD7FE      	BRA         L_main198
0x0C1E	0x2E0C      	DECFSZ      R12, 1, 0
0x0C20	0xD7FC      	BRA         L_main198
;KeyPadWithWeb18f4620.c,528 :: 		if(PORTC & 0b10000000){
0x0C22	0xAE82      	BTFSS       PORTC, 7 
0x0C24	0xD010      	BRA         L_main199
;KeyPadWithWeb18f4620.c,529 :: 		if(currentStatus == 'u'){ //it was unlocked, so lock it
0x0C26	0x501D      	MOVF        _currentStatus, 0 
0x0C28	0x0A75      	XORLW       117
0x0C2A	0xE104      	BNZ         L_main200
;KeyPadWithWeb18f4620.c,530 :: 		currentStatus = 'l';
0x0C2C	0x0E6C      	MOVLW       108
0x0C2E	0x6E1D      	MOVWF       _currentStatus 
;KeyPadWithWeb18f4620.c,532 :: 		moveLock();  //locks door
0x0C30	0xDE88      	RCALL       _moveLock
;KeyPadWithWeb18f4620.c,533 :: 		}
0x0C32	0xD006      	BRA         L_main201
L_main200:
;KeyPadWithWeb18f4620.c,534 :: 		else if(currentStatus == 'l'){  //it was locked, so unlock it
0x0C34	0x501D      	MOVF        _currentStatus, 0 
0x0C36	0x0A6C      	XORLW       108
0x0C38	0xE103      	BNZ         L_main202
;KeyPadWithWeb18f4620.c,535 :: 		currentStatus = 'u';
0x0C3A	0x0E75      	MOVLW       117
0x0C3C	0x6E1D      	MOVWF       _currentStatus 
;KeyPadWithWeb18f4620.c,537 :: 		moveUnlock(); //unlock the door
0x0C3E	0xDDFA      	RCALL       _moveUnlock
;KeyPadWithWeb18f4620.c,538 :: 		}
L_main202:
L_main201:
;KeyPadWithWeb18f4620.c,539 :: 		sendStatus(currentStatus);  //sends the command
0x0C40	0xF028C01D  	MOVFF       _currentStatus, FARG_sendStatus_doorStatus
0x0C44	0xDF09      	RCALL       _sendStatus
;KeyPadWithWeb18f4620.c,540 :: 		}
L_main199:
;KeyPadWithWeb18f4620.c,541 :: 		}
L_main197:
;KeyPadWithWeb18f4620.c,542 :: 		PORTC &= 0b10001111; //turns off comm pins
0x0C46	0x0E8F      	MOVLW       143
0x0C48	0x1682      	ANDWF       PORTC, 1 
;KeyPadWithWeb18f4620.c,547 :: 		PORTB = 0b11100000;
0x0C4A	0x0EE0      	MOVLW       224
0x0C4C	0x6E81      	MOVWF       PORTB 
;KeyPadWithWeb18f4620.c,548 :: 		if(PORTB & 0b00011110){
0x0C4E	0x0E1E      	MOVLW       30
0x0C50	0x1481      	ANDWF       PORTB, 0 
0x0C52	0x6E00      	MOVWF       R0 
0x0C54	0xE03F      	BZ          L_main203
;KeyPadWithWeb18f4620.c,549 :: 		input = checkPassword();
0x0C56	0xF002EC24  	CALL        _checkPassword, 0
0x0C5A	0xF024C000  	MOVFF       R0, main_input_L0
0x0C5E	0xF025C001  	MOVFF       R1, main_input_L0+1
;KeyPadWithWeb18f4620.c,550 :: 		if(input == 1){ // password correct
0x0C62	0x0E00      	MOVLW       0
0x0C64	0x1801      	XORWF       R1, 0 
0x0C66	0xE102      	BNZ         L__main275
0x0C68	0x0E01      	MOVLW       1
0x0C6A	0x1800      	XORWF       R0, 0 
L__main275:
0x0C6C	0xE104      	BNZ         L_main204
;KeyPadWithWeb18f4620.c,551 :: 		PORTA |= 0b00000010; //green led
0x0C6E	0x8280      	BSF         PORTA, 1 
;KeyPadWithWeb18f4620.c,552 :: 		moveUnlock();
0x0C70	0xDDE1      	RCALL       _moveUnlock
;KeyPadWithWeb18f4620.c,553 :: 		PORTA = 0x00;
0x0C72	0x6A80      	CLRF        PORTA 
;KeyPadWithWeb18f4620.c,554 :: 		}
0x0C74	0xD02F      	BRA         L_main205
L_main204:
;KeyPadWithWeb18f4620.c,555 :: 		else if(input == (-1)){ //enter reset mode
0x0C76	0x0EFF      	MOVLW       255
0x0C78	0x1825      	XORWF       main_input_L0+1, 0 
0x0C7A	0xE102      	BNZ         L__main276
0x0C7C	0x0EFF      	MOVLW       255
0x0C7E	0x1824      	XORWF       main_input_L0, 0 
L__main276:
0x0C80	0xE110      	BNZ         L_main206
;KeyPadWithWeb18f4620.c,556 :: 		PORTA |= 0b00001000;  //blue led
0x0C82	0x8680      	BSF         PORTA, 3 
;KeyPadWithWeb18f4620.c,557 :: 		delay_ms(delay1);
0x0C84	0x0E03      	MOVLW       3
0x0C86	0x6E0B      	MOVWF       R11, 0
0x0C88	0x0E08      	MOVLW       8
0x0C8A	0x6E0C      	MOVWF       R12, 0
0x0C8C	0x0E77      	MOVLW       119
0x0C8E	0x6E0D      	MOVWF       R13, 0
L_main207:
0x0C90	0x2E0D      	DECFSZ      R13, 1, 0
0x0C92	0xD7FE      	BRA         L_main207
0x0C94	0x2E0C      	DECFSZ      R12, 1, 0
0x0C96	0xD7FC      	BRA         L_main207
0x0C98	0x2E0B      	DECFSZ      R11, 1, 0
0x0C9A	0xD7FA      	BRA         L_main207
;KeyPadWithWeb18f4620.c,558 :: 		resetMode();
0x0C9C	0xDCB9      	RCALL       _resetMode
;KeyPadWithWeb18f4620.c,559 :: 		PORTA = 0x00;
0x0C9E	0x6A80      	CLRF        PORTA 
;KeyPadWithWeb18f4620.c,560 :: 		}
0x0CA0	0xD019      	BRA         L_main208
L_main206:
;KeyPadWithWeb18f4620.c,561 :: 		else if(input == 7){   //lock button hit
0x0CA2	0x0E00      	MOVLW       0
0x0CA4	0x1825      	XORWF       main_input_L0+1, 0 
0x0CA6	0xE102      	BNZ         L__main277
0x0CA8	0x0E07      	MOVLW       7
0x0CAA	0x1824      	XORWF       main_input_L0, 0 
L__main277:
0x0CAC	0xE104      	BNZ         L_main209
;KeyPadWithWeb18f4620.c,562 :: 		PORTA |= 0b00000010;  //green led
0x0CAE	0x8280      	BSF         PORTA, 1 
;KeyPadWithWeb18f4620.c,563 :: 		moveLock();
0x0CB0	0xDE48      	RCALL       _moveLock
;KeyPadWithWeb18f4620.c,564 :: 		PORTA = 0x00;
0x0CB2	0x6A80      	CLRF        PORTA 
;KeyPadWithWeb18f4620.c,565 :: 		}
0x0CB4	0xD00F      	BRA         L_main210
L_main209:
;KeyPadWithWeb18f4620.c,567 :: 		PORTA = 0b00000100; //red led
0x0CB6	0x0E04      	MOVLW       4
0x0CB8	0x6E80      	MOVWF       PORTA 
;KeyPadWithWeb18f4620.c,568 :: 		delay_ms(delay1);
0x0CBA	0x0E03      	MOVLW       3
0x0CBC	0x6E0B      	MOVWF       R11, 0
0x0CBE	0x0E08      	MOVLW       8
0x0CC0	0x6E0C      	MOVWF       R12, 0
0x0CC2	0x0E77      	MOVLW       119
0x0CC4	0x6E0D      	MOVWF       R13, 0
L_main211:
0x0CC6	0x2E0D      	DECFSZ      R13, 1, 0
0x0CC8	0xD7FE      	BRA         L_main211
0x0CCA	0x2E0C      	DECFSZ      R12, 1, 0
0x0CCC	0xD7FC      	BRA         L_main211
0x0CCE	0x2E0B      	DECFSZ      R11, 1, 0
0x0CD0	0xD7FA      	BRA         L_main211
;KeyPadWithWeb18f4620.c,569 :: 		PORTA = 0x00;
0x0CD2	0x6A80      	CLRF        PORTA 
;KeyPadWithWeb18f4620.c,570 :: 		}
L_main210:
L_main208:
L_main205:
;KeyPadWithWeb18f4620.c,571 :: 		}
L_main203:
;KeyPadWithWeb18f4620.c,572 :: 		}
0x0CD4	0xD782      	BRA         L_main191
;KeyPadWithWeb18f4620.c,573 :: 		}
L_end_main:
0x0CD6	0xD7FF      	BRA         $+0
; end of _main
0x0CFC	0xF015EE10  	LFSR        1, 21
0x0D00	0x0E0F      	MOVLW       15
0x0D02	0x6E00      	MOVWF       R0 
0x0D04	0x0E01      	MOVLW       1
0x0D06	0x6E01      	MOVWF       R1 
0x0D08	0x0EEC      	MOVLW       236
0x0D0A	0x6EF6      	MOVWF       4086 
0x0D0C	0x0E0C      	MOVLW       12
0x0D0E	0x6EF7      	MOVWF       TBLPTRH 
0x0D10	0x0E00      	MOVLW       0
0x0D12	0x6EF8      	MOVWF       TBLPTRU 
0x0D14	0xF000ECA4  	CALL        328, 0
0x0D18	0x0012      	RETURN      0
;KeyPadWithWeb18f4620.c,0 :: ?ICSgetCommand_i_L0
0x0CD8	0x0000 ;?ICSgetCommand_i_L0+0
; end of ?ICSgetCommand_i_L0
;KeyPadWithWeb18f4620.c,0 :: ?ICSgetCommand_result_L0
0x0CDA	0x0000 ;?ICSgetCommand_result_L0+0
; end of ?ICSgetCommand_result_L0
;KeyPadWithWeb18f4620.c,0 :: ?ICSgetCommand_binaryArray_L0
0x0CDC	0x0080 ;?ICSgetCommand_binaryArray_L0+0
0x0CDE	0x0040 ;?ICSgetCommand_binaryArray_L0+2
0x0CE0	0x0020 ;?ICSgetCommand_binaryArray_L0+4
0x0CE2	0x0010 ;?ICSgetCommand_binaryArray_L0+6
0x0CE4	0x0008 ;?ICSgetCommand_binaryArray_L0+8
0x0CE6	0x0004 ;?ICSgetCommand_binaryArray_L0+10
0x0CE8	0x0002 ;?ICSgetCommand_binaryArray_L0+12
0x0CEA	0x0001 ;?ICSgetCommand_binaryArray_L0+14
; end of ?ICSgetCommand_binaryArray_L0
;KeyPadWithWeb18f4620.c,0 :: ?ICS_resetLimit
0x0CEC	0x3880 ;?ICS_resetLimit+0
0x0CEE	0x0001 ;?ICS_resetLimit+2
; end of ?ICS_resetLimit
;KeyPadWithWeb18f4620.c,0 :: ?ICS_psw
0x0CF0	0x3231 ;?ICS_psw+0
0x0CF2	0x3433 ;?ICS_psw+2
; end of ?ICS_psw
;KeyPadWithWeb18f4620.c,0 :: ?ICS_currentStatus
0x0CF4	0x75 ;?ICS_currentStatus+0
; end of ?ICS_currentStatus
;KeyPadWithWeb18f4620.c,0 :: ?ICS_lockLimit
0x0CF5	0x0BB8 ;?ICS_lockLimit+0
0x0CF7	0x0000 ;?ICS_lockLimit+2
; end of ?ICS_lockLimit
;KeyPadWithWeb18f4620.c,0 :: ?ICS_timeOutLimit
0x0CF9	0x01F4 ;?ICS_timeOutLimit+0
; end of ?ICS_timeOutLimit
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C     [100]    _checkColumn2
0x0080     [100]    _checkColumn1
0x00E4     [100]    _checkColumn3
0x0148      [16]    ___CC2DW
0x0158      [52]    _ADCRead
0x018C     [700]    _newPassword
0x0448     [456]    _checkPassword
0x0610     [118]    _resetMode
0x0686     [396]    _getCommand
0x0812      [24]    _init_ports
0x082A      [10]    _ADCInit
0x0834     [270]    _moveUnlock
0x0942     [278]    _moveLock
0x0A58     [370]    _sendStatus
0x0BCA     [270]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    memchr_s_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0003       [1]    R3
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [1]    R4
0x0004       [2]    frexp_pom_L0
0x0005       [1]    R5
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [4]    _resetLimit
0x0019       [4]    _psw
0x001D       [1]    _currentStatus
0x001E       [4]    _lockLimit
0x0022       [2]    _timeOutLimit
0x0024       [2]    main_input_L0
0x0026       [2]    main_keypadCmd_L0
0x0028       [1]    FARG_sendStatus_doorStatus
0x0028       [2]    getCommand_i_L0
0x0028       [4]    moveUnlock_moveTimer_L0
0x0028       [4]    moveLock_moveTimer_L0
0x0029       [2]    sendStatus_i_L0
0x002A       [2]    getCommand_result_L0
0x002C       [2]    moveLock_j_L0
0x002C       [2]    moveUnlock_j_L0
0x002C      [16]    getCommand_binaryArray_L0
0x003C      [18]    getCommand_commandTemp_L0
0x004E       [1]    FARG_ADCRead_ch
0x004E       [2]    checkPassword_counter_L0
0x004E       [4]    newPassword_temp1_L0
0x0050       [4]    checkPassword_resetCounter_L0
0x0052       [4]    newPassword_temp2_L0
0x0054       [4]    checkPassword_lockCounter_L0
0x0056       [2]    newPassword_counter_L0
0x0058       [2]    checkPassword_i_L0
0x0058       [2]    newPassword_i_L0
0x005A       [2]    checkPassword_keysPressed_L0
0x005A       [2]    newPassword_keysPressed_L0
0x005C       [2]    newPassword_j_L0
0x005E       [2]    newPassword_confirmed_L0
0x0060       [2]    FLOC__newPassword
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC2       [0]    GO_DONE_bit
0x0FC2       [0]    ADON_bit
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0CD8       [2]    ?ICSgetCommand_i_L0
0x0CDA       [2]    ?ICSgetCommand_result_L0
0x0CDC      [16]    ?ICSgetCommand_binaryArray_L0
0x0CEC       [4]    ?ICS_resetLimit
0x0CF0       [4]    ?ICS_psw
0x0CF4       [1]    ?ICS_currentStatus
0x0CF5       [4]    ?ICS_lockLimit
0x0CF9       [2]    ?ICS_timeOutLimit
//** Label List: ** 
//----------------------------------------------
  L_ADCRead0
  L_ADCRead1
  L_checkColumn12
  L_checkColumn13
  L_checkColumn14
  L_checkColumn15
  L_checkColumn16
  L_checkColumn17
  L_checkColumn18
  L_checkColumn19
  L_checkColumn110
  L_checkColumn211
  L_checkColumn212
  L_checkColumn213
  L_checkColumn214
  L_checkColumn215
  L_checkColumn216
  L_checkColumn217
  L_checkColumn218
  L_checkColumn219
  L_checkColumn320
  L_checkColumn321
  L_checkColumn322
  L_checkColumn323
  L_checkColumn324
  L_checkColumn325
  L_checkColumn326
  L_checkColumn327
  L_checkColumn328
  L_checkPassword29
  L_checkPassword30
  L_checkPassword31
  L_checkPassword32
  L_checkPassword33
  L_checkPassword34
  L_checkPassword35
  L_checkPassword36
  L_checkPassword37
  L_checkPassword38
  L_checkPassword39
  L_checkPassword40
  L_checkPassword41
  L_checkPassword42
  L_checkPassword43
  L_checkPassword44
  L_checkPassword45
  L_checkPassword46
  L_checkPassword47
  L_checkPassword48
  L_checkPassword49
  L_checkPassword50
  L_checkPassword51
  L_checkPassword52
  L_checkPassword53
  L_checkPassword54
  L_checkPassword55
  L_checkPassword56
  L_checkPassword57
  L_checkPassword58
  L_checkPassword59
  L_checkPassword60
  L_checkPassword61
  L_checkPassword62
  L_checkPassword63
  L_newPassword64
  L_newPassword65
  L_newPassword66
  L_newPassword67
  L_newPassword68
  L_newPassword69
  L_newPassword70
  L_newPassword71
  L_newPassword72
  L_newPassword73
  L_newPassword74
  L_newPassword75
  L_newPassword76
  L_newPassword77
  L_newPassword78
  L_newPassword79
  L_newPassword80
  L_newPassword81
  L_newPassword82
  L_newPassword83
  L_newPassword84
  L_newPassword85
  L_newPassword86
  L_newPassword87
  L_newPassword88
  L_newPassword89
  L_newPassword90
  L_newPassword91
  L_newPassword92
  L_newPassword93
  L_newPassword94
  L_newPassword95
  L_newPassword96
  L_newPassword97
  L_newPassword98
  L_newPassword99
  L_newPassword100
  L_newPassword101
  L_newPassword102
  L_newPassword103
  L_newPassword104
  L_newPassword105
  L_newPassword106
  L_newPassword107
  L_newPassword108
  L_newPassword109
  L_newPassword110
  L_resetMode111
  L_resetMode112
  L_resetMode113
  L_resetMode114
  L_resetMode115
  L_resetMode116
  L_resetMode117
  L_moveLock118
  L_moveLock119
  L_moveLock120
  L_moveLock121
  L_moveLock122
  L_moveLock123
  L_moveLock124
  L_moveLock125
  L_moveLock126
  L_moveLock127
  L_moveLock128
  L_moveLock129
  L_moveUnlock130
  L_moveUnlock131
  L_moveUnlock132
  L_moveUnlock133
  L_moveUnlock134
  L_moveUnlock135
  L_moveUnlock136
  L_moveUnlock137
  L_moveUnlock138
  L_moveUnlock139
  L_moveUnlock140
  L_moveUnlock141
  L_getCommand142
  L_getCommand143
  L_getCommand144
  L_getCommand145
  L_getCommand146
  L_getCommand147
  L_getCommand148
  L_getCommand149
  L_getCommand150
  L_getCommand151
  L_getCommand152
  L_getCommand153
  L_getCommand154
  L_getCommand155
  L_getCommand156
  L_getCommand157
  L_getCommand158
  L_getCommand159
  L_getCommand160
  L_getCommand161
  L_getCommand162
  L_getCommand163
  L_sendStatus164
  L_sendStatus165
  L_sendStatus166
  L_sendStatus167
  L_sendStatus168
  L_sendStatus169
  L_sendStatus170
  L_sendStatus171
  L_sendStatus172
  L_sendStatus173
  L_sendStatus174
  L_sendStatus175
  L_sendStatus176
  L_sendStatus177
  L_sendStatus178
  L_sendStatus179
  L_sendStatus180
  L_sendStatus181
  L_sendStatus182
  L_sendStatus183
  L_sendStatus184
  L_sendStatus185
  L_sendStatus186
  L_sendStatus187
  L_sendStatus188
  L_sendStatus189
  L_sendStatus190
  L_main191
  L_main192
  L_main193
  L_main194
  L_main195
  L_main196
  L_main197
  L_main198
  L_main199
  L_main200
  L_main201
  L_main202
  L_main203
  L_main204
  L_main205
  L_main206
  L_main207
  L_main208
  L_main209
  L_main210
  L_main211
  L__checkPassword212
  L__checkPassword213
  L__checkPassword214
  L__newPassword215
  L__newPassword216
  L__moveLock217
  L__moveLock218
  L__moveUnlock219
  L__moveUnlock220
  L__getCommand221
  L_end_init_ports
  _init_ports
  L_end_ADCInit
  _ADCInit
  L_end_ADCRead
  _ADCRead
  L_end_checkColumn1
  _checkColumn1
  L_end_checkColumn2
  _checkColumn2
  L_end_checkColumn3
  _checkColumn3
  L_end_checkPassword
  _checkPassword
  L__checkPassword229
  L__checkPassword230
  L__checkPassword231
  L__checkPassword232
  L__checkPassword233
  L__checkPassword234
  L__checkPassword235
  L__checkPassword236
  L_end_newPassword
  _newPassword
  L__newPassword238
  L__newPassword239
  L__newPassword240
  L__newPassword241
  L__newPassword242
  L__newPassword243
  L__newPassword244
  L__newPassword245
  L__newPassword246
  L__newPassword247
  L__newPassword248
  L_end_resetMode
  _resetMode
  L__resetMode250
  L_end_moveLock
  _moveLock
  L__moveLock252
  L__moveLock253
  L__moveLock254
  L__moveLock255
  L_end_moveUnlock
  _moveUnlock
  L__moveUnlock257
  L__moveUnlock258
  L__moveUnlock259
  L__moveUnlock260
  L_end_getCommand
  _getCommand
  L__getCommand262
  L__getCommand263
  L__getCommand264
  L__getCommand265
  L__getCommand266
  L__getCommand267
  L_end_sendStatus
  _sendStatus
  L__sendStatus269
  L__sendStatus270
  L__sendStatus271
  L_end_main
  _main
  L__main273
  L__main274
  L__main275
  L__main276
  L__main277
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
